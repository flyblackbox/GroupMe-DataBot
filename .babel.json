{
  "{\"filename\":\"/app/server.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "express",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "express"
              }
            ]
          },
          {
            "source": "cors",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "cors"
              }
            ]
          },
          {
            "source": "apollo-server",
            "imported": [
              "apolloServer"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "apolloServer",
                "local": "apolloServer"
              }
            ]
          },
          {
            "source": "./data/schema",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "Schema"
              }
            ]
          },
          {
            "source": "./data/resolvers",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "Resolvers"
              }
            ]
          },
          {
            "source": "./data/GroupMeUtils",
            "imported": [
              "postBotMessage"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "postBotMessage",
                "local": "postBotMessage"
              }
            ]
          },
          {
            "source": "body-parser",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "bodyParser"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/app/server.js",
      "filenameRelative": "/app/server.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "server.js",
      "sourceFileName": "server.js",
      "sourceRoot": "/app",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "server"
    },
    "ignored": false,
    "code": "'use strict';\n\nvar _express = require('express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _cors = require('cors');\n\nvar _cors2 = _interopRequireDefault(_cors);\n\nvar _apolloServer = require('apollo-server');\n\nvar _schema = require('./data/schema');\n\nvar _schema2 = _interopRequireDefault(_schema);\n\nvar _resolvers = require('./data/resolvers');\n\nvar _resolvers2 = _interopRequireDefault(_resolvers);\n\nvar _GroupMeUtils = require('./data/GroupMeUtils');\n\nvar _bodyParser = require('body-parser');\n\nvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import Mocks from './data/mocks';\n\nvar GRAPHQL_PORT = process.env.PORT || 5000;\nvar WS_PORT = 8080;\n\nvar graphQLServer = (0, _express2.default)();\nvar corsOptions = {\n    origin: function origin(_origin, callback) {\n        callback(null, true);\n    },\n\n    credentials: true\n};\n\ngraphQLServer.use('/graphql', (0, _apolloServer.apolloServer)({\n    graphiql: true,\n    pretty: true,\n    schema: _schema2.default,\n    resolvers: _resolvers2.default\n    // mocks: Mocks,\n}));\n\ngraphQLServer.all('/', function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With');\n    res.header('Access-Control-Allow-Methods', 'GET');\n    return next();\n});\n\ngraphQLServer.use(_bodyParser2.default.json()); // to support JSON-encoded bodies\ngraphQLServer.use(_bodyParser2.default.urlencoded({ // to support URL-encoded bodies\n    extended: true\n}));\n\ngraphQLServer.post('/callback', function (req, res, next) {\n    res.send('Sending updates to server...');\n    (0, _GroupMeUtils.postBotMessage)(req);\n});\n\ngraphQLServer.use((0, _cors2.default)(corsOptions));\ngraphQLServer.listen(GRAPHQL_PORT, function () {\n    return console.log('GraphQL Server is now running on http://localhost:' + GRAPHQL_PORT + '/graphql');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJHUkFQSFFMX1BPUlQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsIldTX1BPUlQiLCJncmFwaFFMU2VydmVyIiwiY29yc09wdGlvbnMiLCJvcmlnaW4iLCJjYWxsYmFjayIsImNyZWRlbnRpYWxzIiwidXNlIiwiZ3JhcGhpcWwiLCJwcmV0dHkiLCJzY2hlbWEiLCJyZXNvbHZlcnMiLCJhbGwiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaGVhZGVyIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInBvc3QiLCJzZW5kIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFFQTs7QUFFQSxJQUFNQSxlQUFnQkMsUUFBUUMsR0FBUixDQUFZQyxJQUFaLElBQW9CLElBQTFDO0FBQ0EsSUFBTUMsVUFBVSxJQUFoQjs7QUFFQSxJQUFNQyxnQkFBZ0Isd0JBQXRCO0FBQ0EsSUFBTUMsY0FBYztBQUNoQkMsVUFEZ0Isa0JBQ1RBLE9BRFMsRUFDREMsUUFEQyxFQUNRO0FBQ3BCQSxpQkFBUyxJQUFULEVBQWUsSUFBZjtBQUNILEtBSGU7O0FBSWhCQyxpQkFBYTtBQUpHLENBQXBCOztBQU9BSixjQUFjSyxHQUFkLENBQWtCLFVBQWxCLEVBQThCLGdDQUFhO0FBQ3ZDQyxjQUFVLElBRDZCO0FBRXZDQyxZQUFRLElBRitCO0FBR3ZDQyw0QkFIdUM7QUFJdkNDO0FBQ0E7QUFMdUMsQ0FBYixDQUE5Qjs7QUFRQVQsY0FBY1UsR0FBZCxDQUFrQixHQUFsQixFQUF1QixVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0JDLElBQXBCLEVBQTBCO0FBQzdDRCxRQUFJRSxNQUFKLENBQVcsNkJBQVgsRUFBMEMsR0FBMUM7QUFDQUYsUUFBSUUsTUFBSixDQUFXLDhCQUFYLEVBQTJDLDhFQUEzQztBQUNBRixRQUFJRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsS0FBM0M7QUFDQSxXQUFPRCxNQUFQO0FBQ0gsQ0FMRDs7QUFPQWIsY0FBY0ssR0FBZCxDQUFrQixxQkFBV1UsSUFBWCxFQUFsQixFLENBQTRDO0FBQzVDZixjQUFjSyxHQUFkLENBQWtCLHFCQUFXVyxVQUFYLENBQXNCLEVBQU07QUFDMUNDLGNBQVU7QUFEMEIsQ0FBdEIsQ0FBbEI7O0FBSUFqQixjQUFja0IsSUFBZCxDQUFtQixXQUFuQixFQUFnQyxVQUFVUCxHQUFWLEVBQWVDLEdBQWYsRUFBb0JDLElBQXBCLEVBQTBCO0FBQ3RERCxRQUFJTyxJQUFKLENBQVMsOEJBQVQ7QUFDQSxzQ0FBZVIsR0FBZjtBQUNILENBSEQ7O0FBS0FYLGNBQWNLLEdBQWQsQ0FBa0Isb0JBQUtKLFdBQUwsQ0FBbEI7QUFDQUQsY0FBY29CLE1BQWQsQ0FBcUJ6QixZQUFyQixFQUFtQztBQUFBLFdBQU0wQixRQUFRQyxHQUFSLHdEQUNnQjNCLFlBRGhCLGNBQU47QUFBQSxDQUFuQyIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiL2FwcCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQge2Fwb2xsb1NlcnZlcn0gZnJvbSAnYXBvbGxvLXNlcnZlcic7XG5pbXBvcnQgU2NoZW1hIGZyb20gJy4vZGF0YS9zY2hlbWEnO1xuaW1wb3J0IFJlc29sdmVycyBmcm9tICcuL2RhdGEvcmVzb2x2ZXJzJztcbmltcG9ydCAge3Bvc3RCb3RNZXNzYWdlfSBmcm9tICcuL2RhdGEvR3JvdXBNZVV0aWxzJztcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcblxuLy8gaW1wb3J0IE1vY2tzIGZyb20gJy4vZGF0YS9tb2Nrcyc7XG5cbmNvbnN0IEdSQVBIUUxfUE9SVCA9IChwcm9jZXNzLmVudi5QT1JUIHx8IDUwMDApO1xuY29uc3QgV1NfUE9SVCA9IDgwODA7XG5cbmNvbnN0IGdyYXBoUUxTZXJ2ZXIgPSBleHByZXNzKCk7XG5jb25zdCBjb3JzT3B0aW9ucyA9IHtcbiAgICBvcmlnaW4ob3JpZ2luLCBjYWxsYmFjayl7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgIH0sXG4gICAgY3JlZGVudGlhbHM6IHRydWVcbn07XG5cbmdyYXBoUUxTZXJ2ZXIudXNlKCcvZ3JhcGhxbCcsIGFwb2xsb1NlcnZlcih7XG4gICAgZ3JhcGhpcWw6IHRydWUsXG4gICAgcHJldHR5OiB0cnVlLFxuICAgIHNjaGVtYTogU2NoZW1hLFxuICAgIHJlc29sdmVyczogUmVzb2x2ZXJzXG4gICAgLy8gbW9ja3M6IE1vY2tzLFxufSkpO1xuXG5ncmFwaFFMU2VydmVyLmFsbCgnLycsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdDYWNoZS1Db250cm9sLCBQcmFnbWEsIE9yaWdpbiwgQXV0aG9yaXphdGlvbiwgQ29udGVudC1UeXBlLCBYLVJlcXVlc3RlZC1XaXRoJyk7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdHRVQnKTtcbiAgICByZXR1cm4gbmV4dCgpO1xufSk7XG5cbmdyYXBoUUxTZXJ2ZXIudXNlKGJvZHlQYXJzZXIuanNvbigpKTsgICAgICAgLy8gdG8gc3VwcG9ydCBKU09OLWVuY29kZWQgYm9kaWVzXG5ncmFwaFFMU2VydmVyLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyAgICAgLy8gdG8gc3VwcG9ydCBVUkwtZW5jb2RlZCBib2RpZXNcbiAgICBleHRlbmRlZDogdHJ1ZVxufSkpO1xuXG5ncmFwaFFMU2VydmVyLnBvc3QoJy9jYWxsYmFjaycsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5zZW5kKCdTZW5kaW5nIHVwZGF0ZXMgdG8gc2VydmVyLi4uJyk7XG4gICAgcG9zdEJvdE1lc3NhZ2UocmVxKTtcbn0pXG5cbmdyYXBoUUxTZXJ2ZXIudXNlKGNvcnMoY29yc09wdGlvbnMpKTtcbmdyYXBoUUxTZXJ2ZXIubGlzdGVuKEdSQVBIUUxfUE9SVCwgKCkgPT4gY29uc29sZS5sb2coXG4gICAgYEdyYXBoUUwgU2VydmVyIGlzIG5vdyBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtHUkFQSFFMX1BPUlR9L2dyYXBocWxgXG4pKTtcbiJdfQ==",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "GRAPHQL_PORT",
        "process",
        "env",
        "PORT",
        "WS_PORT",
        "graphQLServer",
        "corsOptions",
        "origin",
        "callback",
        "credentials",
        "use",
        "graphiql",
        "pretty",
        "schema",
        "resolvers",
        "all",
        "req",
        "res",
        "next",
        "header",
        "json",
        "urlencoded",
        "extended",
        "post",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;AAEA,IAAMA,eAAgBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA1C;AACA,IAAMC,UAAU,IAAhB;;AAEA,IAAMC,gBAAgB,wBAAtB;AACA,IAAMC,cAAc;AAChBC,UADgB,kBACTA,OADS,EACDC,QADC,EACQ;AACpBA,iBAAS,IAAT,EAAe,IAAf;AACH,KAHe;;AAIhBC,iBAAa;AAJG,CAApB;;AAOAJ,cAAcK,GAAd,CAAkB,UAAlB,EAA8B,gCAAa;AACvCC,cAAU,IAD6B;AAEvCC,YAAQ,IAF+B;AAGvCC,4BAHuC;AAIvCC;AACA;AALuC,CAAb,CAA9B;;AAQAT,cAAcU,GAAd,CAAkB,GAAlB,EAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC7CD,QAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,8EAA3C;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,KAA3C;AACA,WAAOD,MAAP;AACH,CALD;;AAOAb,cAAcK,GAAd,CAAkB,qBAAWU,IAAX,EAAlB,E,CAA4C;AAC5Cf,cAAcK,GAAd,CAAkB,qBAAWW,UAAX,CAAsB,EAAM;AAC1CC,cAAU;AAD0B,CAAtB,CAAlB;;AAIAjB,cAAckB,IAAd,CAAmB,WAAnB,EAAgC,UAAUP,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACtDD,QAAIO,IAAJ,CAAS,8BAAT;AACA,sCAAeR,GAAf;AACH,CAHD;;AAKAX,cAAcK,GAAd,CAAkB,oBAAKJ,WAAL,CAAlB;AACAD,cAAcoB,MAAd,CAAqBzB,YAArB,EAAmC;AAAA,WAAM0B,QAAQC,GAAR,wDACgB3B,YADhB,cAAN;AAAA,CAAnC",
      "file": "server.js",
      "sourceRoot": "/app",
      "sourcesContent": [
        "import express from 'express';\nimport cors from 'cors';\nimport {apolloServer} from 'apollo-server';\nimport Schema from './data/schema';\nimport Resolvers from './data/resolvers';\nimport  {postBotMessage} from './data/GroupMeUtils';\nimport bodyParser from 'body-parser';\n\n// import Mocks from './data/mocks';\n\nconst GRAPHQL_PORT = (process.env.PORT || 5000);\nconst WS_PORT = 8080;\n\nconst graphQLServer = express();\nconst corsOptions = {\n    origin(origin, callback){\n        callback(null, true);\n    },\n    credentials: true\n};\n\ngraphQLServer.use('/graphql', apolloServer({\n    graphiql: true,\n    pretty: true,\n    schema: Schema,\n    resolvers: Resolvers\n    // mocks: Mocks,\n}));\n\ngraphQLServer.all('/', function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With');\n    res.header('Access-Control-Allow-Methods', 'GET');\n    return next();\n});\n\ngraphQLServer.use(bodyParser.json());       // to support JSON-encoded bodies\ngraphQLServer.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n    extended: true\n}));\n\ngraphQLServer.post('/callback', function (req, res, next) {\n    res.send('Sending updates to server...');\n    postBotMessage(req);\n})\n\ngraphQLServer.use(cors(corsOptions));\ngraphQLServer.listen(GRAPHQL_PORT, () => console.log(\n    `GraphQL Server is now running on http://localhost:${GRAPHQL_PORT}/graphql`\n));\n"
      ]
    },
    "mtime": 1508231409504
  },
  "{\"filename\":\"/app/data/schema.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [],
      "marked": [],
      "modules": {
        "imports": [],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/app/data/schema.js",
      "filenameRelative": "/app/data/schema.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "schema.js",
      "sourceFileName": "schema.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "schema"
    },
    "ignored": false,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n   value: true\n});\nvar typeDefinitions = \"\\ntype Group {\\n   id: Int\\n   group_id: Int\\n   name: String\\n   members: [Member]\\n}\\n\\ntype Member {\\n   id: Int\\n   user_id: Int\\n   nickname: String\\n}\\n\\ntype MessageSummary {\\n    count: String!\\n    messages: [Message]\\n}\\n\\ntype Message {\\n   id: String!\\n   group_id: String!\\n   user_id: String!\\n   name: String!\\n   text: String!\\n   avatar_url: String!\\n   created_at: String!\\n   sender_type: String!\\n   system: String!\\n   favorited_by: String!\\n}\\n\\ntype Bot {\\n   bot_id: String!\\n   name: String!\\n   group_name: String!\\n   avatar_url: String,\\n   callback_url: String\\n}\\n\\n\\ntype BotMessage {\\n   id: Int!\\n   bot_id: String!\\n   text: String!\\n}\\n\\ntype WordCount {\\n   group_name: String!\\n   word: String!\\n   count: Int!\\n}\\n\\ntype LastSeen {\\n    username: String!\\n    last_seen: String!\\n}\\n\\ntype HeartCount {\\n    username: String!\\n    count: Int!\\n}\\n\\ntype Query{\\n    group(token: String!): Group \\n    bots(token: String!): [Bot]\\n    messages(token: String!, group_id: Int!): MessageSummary\\n    wordCount(token: String!, group_id: Int!, word: String!): WordCount\\n    lastSeen(token: String!, group_id: Int!, username: String!): LastSeen\\n    heartCount(token: String!, group_id: Int!): [HeartCount]\\n}\\n \\ntype Mutation{\\n    sendBotMessage(token: String!, bot_id: String!, text: String!): BotMessage\\n}\\n\\nschema {\\n  query: Query\\n  mutation: Mutation\\n}\";\n\nexports.default = [typeDefinitions];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVtYS5qcyJdLCJuYW1lcyI6WyJ0eXBlRGVmaW5pdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTUEsdzRDQUFOOztrQkFpRmUsQ0FBQ0EsZUFBRCxDIiwiZmlsZSI6InNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIvYXBwL2RhdGEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0eXBlRGVmaW5pdGlvbnMgPSBgXG50eXBlIEdyb3VwIHtcbiAgIGlkOiBJbnRcbiAgIGdyb3VwX2lkOiBJbnRcbiAgIG5hbWU6IFN0cmluZ1xuICAgbWVtYmVyczogW01lbWJlcl1cbn1cblxudHlwZSBNZW1iZXIge1xuICAgaWQ6IEludFxuICAgdXNlcl9pZDogSW50XG4gICBuaWNrbmFtZTogU3RyaW5nXG59XG5cbnR5cGUgTWVzc2FnZVN1bW1hcnkge1xuICAgIGNvdW50OiBTdHJpbmchXG4gICAgbWVzc2FnZXM6IFtNZXNzYWdlXVxufVxuXG50eXBlIE1lc3NhZ2Uge1xuICAgaWQ6IFN0cmluZyFcbiAgIGdyb3VwX2lkOiBTdHJpbmchXG4gICB1c2VyX2lkOiBTdHJpbmchXG4gICBuYW1lOiBTdHJpbmchXG4gICB0ZXh0OiBTdHJpbmchXG4gICBhdmF0YXJfdXJsOiBTdHJpbmchXG4gICBjcmVhdGVkX2F0OiBTdHJpbmchXG4gICBzZW5kZXJfdHlwZTogU3RyaW5nIVxuICAgc3lzdGVtOiBTdHJpbmchXG4gICBmYXZvcml0ZWRfYnk6IFN0cmluZyFcbn1cblxudHlwZSBCb3Qge1xuICAgYm90X2lkOiBTdHJpbmchXG4gICBuYW1lOiBTdHJpbmchXG4gICBncm91cF9uYW1lOiBTdHJpbmchXG4gICBhdmF0YXJfdXJsOiBTdHJpbmcsXG4gICBjYWxsYmFja191cmw6IFN0cmluZ1xufVxuXG5cbnR5cGUgQm90TWVzc2FnZSB7XG4gICBpZDogSW50IVxuICAgYm90X2lkOiBTdHJpbmchXG4gICB0ZXh0OiBTdHJpbmchXG59XG5cbnR5cGUgV29yZENvdW50IHtcbiAgIGdyb3VwX25hbWU6IFN0cmluZyFcbiAgIHdvcmQ6IFN0cmluZyFcbiAgIGNvdW50OiBJbnQhXG59XG5cbnR5cGUgTGFzdFNlZW4ge1xuICAgIHVzZXJuYW1lOiBTdHJpbmchXG4gICAgbGFzdF9zZWVuOiBTdHJpbmchXG59XG5cbnR5cGUgSGVhcnRDb3VudCB7XG4gICAgdXNlcm5hbWU6IFN0cmluZyFcbiAgICBjb3VudDogSW50IVxufVxuXG50eXBlIFF1ZXJ5e1xuICAgIGdyb3VwKHRva2VuOiBTdHJpbmchKTogR3JvdXAgXG4gICAgYm90cyh0b2tlbjogU3RyaW5nISk6IFtCb3RdXG4gICAgbWVzc2FnZXModG9rZW46IFN0cmluZyEsIGdyb3VwX2lkOiBJbnQhKTogTWVzc2FnZVN1bW1hcnlcbiAgICB3b3JkQ291bnQodG9rZW46IFN0cmluZyEsIGdyb3VwX2lkOiBJbnQhLCB3b3JkOiBTdHJpbmchKTogV29yZENvdW50XG4gICAgbGFzdFNlZW4odG9rZW46IFN0cmluZyEsIGdyb3VwX2lkOiBJbnQhLCB1c2VybmFtZTogU3RyaW5nISk6IExhc3RTZWVuXG4gICAgaGVhcnRDb3VudCh0b2tlbjogU3RyaW5nISwgZ3JvdXBfaWQ6IEludCEpOiBbSGVhcnRDb3VudF1cbn1cbiBcbnR5cGUgTXV0YXRpb257XG4gICAgc2VuZEJvdE1lc3NhZ2UodG9rZW46IFN0cmluZyEsIGJvdF9pZDogU3RyaW5nISwgdGV4dDogU3RyaW5nISk6IEJvdE1lc3NhZ2Vcbn1cblxuc2NoZW1hIHtcbiAgcXVlcnk6IFF1ZXJ5XG4gIG11dGF0aW9uOiBNdXRhdGlvblxufWA7XG5cbmV4cG9ydCBkZWZhdWx0IFt0eXBlRGVmaW5pdGlvbnNdOyJdfQ==",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "schema.js"
      ],
      "names": [
        "typeDefinitions"
      ],
      "mappings": ";;;;;AAAA,IAAMA,w4CAAN;;kBAiFe,CAACA,eAAD,C",
      "file": "schema.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "const typeDefinitions = `\ntype Group {\n   id: Int\n   group_id: Int\n   name: String\n   members: [Member]\n}\n\ntype Member {\n   id: Int\n   user_id: Int\n   nickname: String\n}\n\ntype MessageSummary {\n    count: String!\n    messages: [Message]\n}\n\ntype Message {\n   id: String!\n   group_id: String!\n   user_id: String!\n   name: String!\n   text: String!\n   avatar_url: String!\n   created_at: String!\n   sender_type: String!\n   system: String!\n   favorited_by: String!\n}\n\ntype Bot {\n   bot_id: String!\n   name: String!\n   group_name: String!\n   avatar_url: String,\n   callback_url: String\n}\n\n\ntype BotMessage {\n   id: Int!\n   bot_id: String!\n   text: String!\n}\n\ntype WordCount {\n   group_name: String!\n   word: String!\n   count: Int!\n}\n\ntype LastSeen {\n    username: String!\n    last_seen: String!\n}\n\ntype HeartCount {\n    username: String!\n    count: Int!\n}\n\ntype Query{\n    group(token: String!): Group \n    bots(token: String!): [Bot]\n    messages(token: String!, group_id: Int!): MessageSummary\n    wordCount(token: String!, group_id: Int!, word: String!): WordCount\n    lastSeen(token: String!, group_id: Int!, username: String!): LastSeen\n    heartCount(token: String!, group_id: Int!): [HeartCount]\n}\n \ntype Mutation{\n    sendBotMessage(token: String!, bot_id: String!, text: String!): BotMessage\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}`;\n\nexport default [typeDefinitions];"
      ]
    },
    "mtime": 1508231153666
  },
  "{\"filename\":\"/app/data/resolvers.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "./resolver_query",
            "imported": [
              "resolver_query"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "resolver_query",
                "local": "resolver_query"
              }
            ]
          },
          {
            "source": "./resolver_mutation",
            "imported": [
              "resolver_mutations"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "resolver_mutations",
                "local": "resolver_mutations"
              }
            ]
          },
          {
            "source": "./relationship",
            "imported": [
              "groupRelationship",
              "messagesRelationship"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "groupRelationship",
                "local": "groupRelationship"
              },
              {
                "kind": "named",
                "imported": "messagesRelationship",
                "local": "messagesRelationship"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/app/data/resolvers.js",
      "filenameRelative": "/app/data/resolvers.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "resolvers.js",
      "sourceFileName": "resolvers.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "resolvers"
    },
    "ignored": false,
    "code": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _resolver_query = require('./resolver_query');\n\nvar _resolver_mutation = require('./resolver_mutation');\n\nvar _relationship = require('./relationship');\n\nvar resolvers = {\n    Query: (0, _resolver_query.resolver_query)(),\n    Mutation: (0, _resolver_mutation.resolver_mutations)(),\n    Group: (0, _relationship.groupRelationship)(),\n    MessageSummary: (0, _relationship.messagesRelationship)()\n};\n\nexports.default = resolvers;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVycy5qcyJdLCJuYW1lcyI6WyJyZXNvbHZlcnMiLCJRdWVyeSIsIk11dGF0aW9uIiwiR3JvdXAiLCJNZXNzYWdlU3VtbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0EsSUFBTUEsWUFBWTtBQUNkQyxXQUFPLHFDQURPO0FBRWRDLGNBQVUsNENBRkk7QUFHZEMsV0FBTyxzQ0FITztBQUlkQyxvQkFBZ0I7QUFKRixDQUFsQjs7a0JBT2VKLFMiLCJmaWxlIjoicmVzb2x2ZXJzLmpzIiwic291cmNlUm9vdCI6Ii9hcHAvZGF0YSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVyX3F1ZXJ5IH0gZnJvbSAnLi9yZXNvbHZlcl9xdWVyeSc7XG5pbXBvcnQgeyByZXNvbHZlcl9tdXRhdGlvbnMgfSBmcm9tICcuL3Jlc29sdmVyX211dGF0aW9uJztcbmltcG9ydCB7IGdyb3VwUmVsYXRpb25zaGlwLCBtZXNzYWdlc1JlbGF0aW9uc2hpcH0gZnJvbSAnLi9yZWxhdGlvbnNoaXAnO1xuY29uc3QgcmVzb2x2ZXJzID0ge1xuICAgIFF1ZXJ5OiByZXNvbHZlcl9xdWVyeSgpLFxuICAgIE11dGF0aW9uOiByZXNvbHZlcl9tdXRhdGlvbnMoKSxcbiAgICBHcm91cDogZ3JvdXBSZWxhdGlvbnNoaXAoKSxcbiAgICBNZXNzYWdlU3VtbWFyeTogbWVzc2FnZXNSZWxhdGlvbnNoaXAoKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZXJzOyJdfQ==",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "resolvers.js"
      ],
      "names": [
        "resolvers",
        "Query",
        "Mutation",
        "Group",
        "MessageSummary"
      ],
      "mappings": ";;;;;;AAAA;;AACA;;AACA;;AACA,IAAMA,YAAY;AACdC,WAAO,qCADO;AAEdC,cAAU,4CAFI;AAGdC,WAAO,sCAHO;AAIdC,oBAAgB;AAJF,CAAlB;;kBAOeJ,S",
      "file": "resolvers.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "import { resolver_query } from './resolver_query';\nimport { resolver_mutations } from './resolver_mutation';\nimport { groupRelationship, messagesRelationship} from './relationship';\nconst resolvers = {\n    Query: resolver_query(),\n    Mutation: resolver_mutations(),\n    Group: groupRelationship(),\n    MessageSummary: messagesRelationship()\n};\n\nexport default resolvers;"
      ]
    },
    "mtime": 1508231153662
  },
  "{\"filename\":\"/app/data/resolver_query.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "interopRequireWildcard"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "./helpers",
            "imported": [
              "*"
            ],
            "specifiers": [
              {
                "kind": "namespace",
                "local": "helpers"
              }
            ]
          }
        ],
        "exports": {
          "exported": [
            "resolver_query"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "resolver_query",
              "exported": "resolver_query"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/resolver_query.js",
      "filenameRelative": "/app/data/resolver_query.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "resolver_query.js",
      "sourceFileName": "resolver_query.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "resolver_query"
    },
    "ignored": false,
    "code": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.resolver_query = undefined;\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar resolver_query = exports.resolver_query = function resolver_query() {\n    return {\n        group: helpers.getGroupDetails(),\n        bots: helpers.getBots(),\n        messages: helpers.getMessages(),\n        wordCount: helpers.getWordCount(),\n        lastSeen: helpers.getUserLastSeen(),\n        heartCount: helpers.getHeartCount()\n    };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVyX3F1ZXJ5LmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJyZXNvbHZlcl9xdWVyeSIsImdyb3VwIiwiZ2V0R3JvdXBEZXRhaWxzIiwiYm90cyIsImdldEJvdHMiLCJtZXNzYWdlcyIsImdldE1lc3NhZ2VzIiwid29yZENvdW50IiwiZ2V0V29yZENvdW50IiwibGFzdFNlZW4iLCJnZXRVc2VyTGFzdFNlZW4iLCJoZWFydENvdW50IiwiZ2V0SGVhcnRDb3VudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztJQUFZQSxPOzs7O0FBRUwsSUFBTUMsMENBQWlCLFNBQWpCQSxjQUFpQixHQUFZO0FBQ3RDLFdBQU87QUFDSEMsZUFBT0YsUUFBUUcsZUFBUixFQURKO0FBRUhDLGNBQU1KLFFBQVFLLE9BQVIsRUFGSDtBQUdIQyxrQkFBVU4sUUFBUU8sV0FBUixFQUhQO0FBSUhDLG1CQUFXUixRQUFRUyxZQUFSLEVBSlI7QUFLSEMsa0JBQVVWLFFBQVFXLGVBQVIsRUFMUDtBQU1IQyxvQkFBWVosUUFBUWEsYUFBUjtBQU5ULEtBQVA7QUFRSCxDQVRNIiwiZmlsZSI6InJlc29sdmVyX3F1ZXJ5LmpzIiwic291cmNlUm9vdCI6Ii9hcHAvZGF0YSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCByZXNvbHZlcl9xdWVyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBncm91cDogaGVscGVycy5nZXRHcm91cERldGFpbHMoKSxcbiAgICAgICAgYm90czogaGVscGVycy5nZXRCb3RzKCksXG4gICAgICAgIG1lc3NhZ2VzOiBoZWxwZXJzLmdldE1lc3NhZ2VzKCksXG4gICAgICAgIHdvcmRDb3VudDogaGVscGVycy5nZXRXb3JkQ291bnQoKSxcbiAgICAgICAgbGFzdFNlZW46IGhlbHBlcnMuZ2V0VXNlckxhc3RTZWVuKCksXG4gICAgICAgIGhlYXJ0Q291bnQ6IGhlbHBlcnMuZ2V0SGVhcnRDb3VudCgpLFxuICAgIH1cbn0iXX0=",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "resolver_query.js"
      ],
      "names": [
        "helpers",
        "resolver_query",
        "group",
        "getGroupDetails",
        "bots",
        "getBots",
        "messages",
        "getMessages",
        "wordCount",
        "getWordCount",
        "lastSeen",
        "getUserLastSeen",
        "heartCount",
        "getHeartCount"
      ],
      "mappings": ";;;;;;;AACA;;IAAYA,O;;;;AAEL,IAAMC,0CAAiB,SAAjBA,cAAiB,GAAY;AACtC,WAAO;AACHC,eAAOF,QAAQG,eAAR,EADJ;AAEHC,cAAMJ,QAAQK,OAAR,EAFH;AAGHC,kBAAUN,QAAQO,WAAR,EAHP;AAIHC,mBAAWR,QAAQS,YAAR,EAJR;AAKHC,kBAAUV,QAAQW,eAAR,EALP;AAMHC,oBAAYZ,QAAQa,aAAR;AANT,KAAP;AAQH,CATM",
      "file": "resolver_query.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "\nimport * as helpers from './helpers'\n\nexport const resolver_query = function () {\n    return {\n        group: helpers.getGroupDetails(),\n        bots: helpers.getBots(),\n        messages: helpers.getMessages(),\n        wordCount: helpers.getWordCount(),\n        lastSeen: helpers.getUserLastSeen(),\n        heartCount: helpers.getHeartCount(),\n    }\n}"
      ]
    },
    "mtime": 1508231153654
  },
  "{\"filename\":\"/app/data/helpers.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator"
      ],
      "marked": [],
      "modules": {
        "imports": [],
        "exports": {
          "exported": [
            "getGroupDetails",
            "getBots",
            "getMessages",
            "getWordCount",
            "sendBotMessage",
            "callGroupMe",
            "callGroupDetails",
            "callGetMessages",
            "getUserLastSeen",
            "getHeartCount",
            "getMessageWrapper",
            "groupMeApiGetMessages"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "getGroupDetails",
              "exported": "getGroupDetails"
            },
            {
              "kind": "local",
              "local": "getBots",
              "exported": "getBots"
            },
            {
              "kind": "local",
              "local": "getMessages",
              "exported": "getMessages"
            },
            {
              "kind": "local",
              "local": "getWordCount",
              "exported": "getWordCount"
            },
            {
              "kind": "local",
              "local": "sendBotMessage",
              "exported": "sendBotMessage"
            },
            {
              "kind": "local",
              "local": "callGroupMe",
              "exported": "callGroupMe"
            },
            {
              "kind": "local",
              "local": "callGroupDetails",
              "exported": "callGroupDetails"
            },
            {
              "kind": "local",
              "local": "callGetMessages",
              "exported": "callGetMessages"
            },
            {
              "kind": "local",
              "local": "getUserLastSeen",
              "exported": "getUserLastSeen"
            },
            {
              "kind": "local",
              "local": "getHeartCount",
              "exported": "getHeartCount"
            },
            {
              "kind": "local",
              "local": "getMessageWrapper",
              "exported": "getMessageWrapper"
            },
            {
              "kind": "local",
              "local": "groupMeApiGetMessages",
              "exported": "groupMeApiGetMessages"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/helpers.js",
      "filenameRelative": "/app/data/helpers.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "helpers.js",
      "sourceFileName": "helpers.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "helpers"
    },
    "ignored": false,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar request = require('request');\nvar GROUP_ME_BASE_URL = \"https://api.groupme.com/v3/\";\n\nvar getGroupDetails = exports.getGroupDetails = function getGroupDetails() {\n    return function () {\n        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(_, args) {\n            var group;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                    switch (_context.prev = _context.next) {\n                        case 0:\n                            console.log(\"Function: getGroupDetails\");\n                            _context.next = 3;\n                            return callGroupDetails(args.token);\n\n                        case 3:\n                            group = _context.sent;\n                            return _context.abrupt(\"return\", group);\n\n                        case 5:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }\n            }, _callee, undefined);\n        }));\n\n        return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n};\n\nvar getBots = exports.getBots = function getBots() {\n    return function () {\n        var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(_, args) {\n            var data, response;\n            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                    switch (_context2.prev = _context2.next) {\n                        case 0:\n                            console.log(\"Function: getBots\");\n                            _context2.t0 = JSON;\n                            _context2.next = 4;\n                            return callGroupMe(\"bots\", args.token, \"GET\", {});\n\n                        case 4:\n                            _context2.t1 = _context2.sent;\n                            data = _context2.t0.parse.call(_context2.t0, _context2.t1);\n                            response = data.response;\n                            return _context2.abrupt(\"return\", response);\n\n                        case 8:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }\n            }, _callee2, undefined);\n        }));\n\n        return function (_x3, _x4) {\n            return _ref2.apply(this, arguments);\n        };\n    }();\n};\n\nvar getMessages = exports.getMessages = function getMessages() {\n    return function () {\n        var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(_, args) {\n            var response;\n            return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while (1) {\n                    switch (_context3.prev = _context3.next) {\n                        case 0:\n                            console.log(\"Function: getMessages\");\n                            _context3.next = 3;\n                            return callGetMessages(args);\n\n                        case 3:\n                            response = _context3.sent;\n                            return _context3.abrupt(\"return\", response);\n\n                        case 5:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3, undefined);\n        }));\n\n        return function (_x5, _x6) {\n            return _ref3.apply(this, arguments);\n        };\n    }();\n};\n\nvar getWordCount = exports.getWordCount = function getWordCount() {\n    return function () {\n        var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(_, args) {\n            var response, messages, count, i, message, text, groupDetails, output;\n            return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                while (1) {\n                    switch (_context4.prev = _context4.next) {\n                        case 0:\n                            console.log(\"Function: getWordCount\");\n                            _context4.next = 3;\n                            return callGetMessages(args);\n\n                        case 3:\n                            response = _context4.sent;\n                            messages = response.messages;\n                            count = 0;\n\n                            for (i = 0; i < messages.length; i++) {\n                                message = messages[i];\n                                text = message.text;\n\n                                if (text.includes(args.word)) {\n                                    count++;\n                                }\n                            }\n\n                            _context4.next = 9;\n                            return callGroupDetails(args.token);\n\n                        case 9:\n                            groupDetails = _context4.sent;\n                            output = {\n                                group_name: groupDetails.name,\n                                word: args.word,\n                                count: count\n                            };\n                            return _context4.abrupt(\"return\", output);\n\n                        case 12:\n                        case \"end\":\n                            return _context4.stop();\n                    }\n                }\n            }, _callee4, undefined);\n        }));\n\n        return function (_x7, _x8) {\n            return _ref4.apply(this, arguments);\n        };\n    }();\n};\n\nvar sendBotMessage = exports.sendBotMessage = function sendBotMessage() {\n    return function () {\n        var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(_, args) {\n            var formData, data, message;\n            return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                while (1) {\n                    switch (_context5.prev = _context5.next) {\n                        case 0:\n                            console.log(\"Function: sendBotMessage\");\n                            formData = {\n                                bot_id: args.bot_id,\n                                text: args.text\n                            };\n                            _context5.next = 4;\n                            return callGroupMe(\"bots/post\", args.token, \"POST\", formData);\n\n                        case 4:\n                            data = _context5.sent;\n                            message = {\n                                id: 1,\n                                bot_id: args.bot_id,\n                                text: args.text\n                            };\n                            return _context5.abrupt(\"return\", message);\n\n                        case 7:\n                        case \"end\":\n                            return _context5.stop();\n                    }\n                }\n            }, _callee5, undefined);\n        }));\n\n        return function (_x9, _x10) {\n            return _ref5.apply(this, arguments);\n        };\n    }();\n};\n\nvar callGroupMe = exports.callGroupMe = function () {\n    var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(subUri, token, request_type, formData, before_id) {\n        var uri, requestObject;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n                switch (_context6.prev = _context6.next) {\n                    case 0:\n                        console.log(\"Calling GroupMe API...\");\n\n                        uri = GROUP_ME_BASE_URL + subUri + \"?limit=100&token=\" + token;\n\n                        if (before_id > 0) {\n                            uri = uri + \"&before_id=\" + before_id;\n                        }\n\n                        requestObject = {\n                            url: uri,\n                            method: request_type\n                        };\n\n                        if (request_type === \"POST\") {\n                            console.log(formData);\n                            requestObject.form = formData;\n                            requestObject.json = true;\n                        }\n\n                        console.log(requestObject);\n\n                        return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                            //can't get 'await' to work with 'request'\n                            request(requestObject, function (error, response, body) {\n                                if (!error && response.statusCode === 200) {\n                                    resolve(body || response);\n                                } else {\n                                    console.log(\"Response:\" + response);\n                                    console.log(\"Error: \" + error);\n                                    resolve({ error: \"Empty Response\" });\n                                }\n                            });\n                        }));\n\n                    case 7:\n                    case \"end\":\n                        return _context6.stop();\n                }\n            }\n        }, _callee6, undefined);\n    }));\n\n    return function callGroupMe(_x11, _x12, _x13, _x14, _x15) {\n        return _ref6.apply(this, arguments);\n    };\n}();\n\nvar callGroupDetails = exports.callGroupDetails = function () {\n    var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(token) {\n        var data, response, group;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n                switch (_context7.prev = _context7.next) {\n                    case 0:\n                        _context7.t0 = JSON;\n                        _context7.next = 3;\n                        return callGroupMe(\"groups\", token, \"GET\", {});\n\n                    case 3:\n                        _context7.t1 = _context7.sent;\n                        data = _context7.t0.parse.call(_context7.t0, _context7.t1);\n                        response = data.response[0];\n                        group = {\n                            id: response.id,\n                            group_id: response.group_id,\n                            name: response.name,\n                            members: response.members\n                        };\n                        return _context7.abrupt(\"return\", group);\n\n                    case 8:\n                    case \"end\":\n                        return _context7.stop();\n                }\n            }\n        }, _callee7, undefined);\n    }));\n\n    return function callGroupDetails(_x16) {\n        return _ref7.apply(this, arguments);\n    };\n}();\n\nvar callGetMessages = exports.callGetMessages = function () {\n    var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(args) {\n        var data, response;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n                switch (_context8.prev = _context8.next) {\n                    case 0:\n                        _context8.t0 = JSON;\n                        _context8.next = 3;\n                        return callGroupMe(\"groups/\" + args.group_id + \"/messages\", args.token, \"GET\", {}, args.before_id);\n\n                    case 3:\n                        _context8.t1 = _context8.sent;\n                        data = _context8.t0.parse.call(_context8.t0, _context8.t1);\n                        response = data.response;\n                        return _context8.abrupt(\"return\", response);\n\n                    case 7:\n                    case \"end\":\n                        return _context8.stop();\n                }\n            }\n        }, _callee8, undefined);\n    }));\n\n    return function callGetMessages(_x17) {\n        return _ref8.apply(this, arguments);\n    };\n}();\n\nvar getUserLastSeen = exports.getUserLastSeen = function getUserLastSeen() {\n    return function () {\n        var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(_, args) {\n            var groupDetails, members, user_id, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, member, error, response, messages, last_seen, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, message, output;\n\n            return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                while (1) {\n                    switch (_context9.prev = _context9.next) {\n                        case 0:\n                            console.log(\"Function: getUserLastSeen\");\n                            _context9.next = 3;\n                            return callGroupDetails(args.token);\n\n                        case 3:\n                            groupDetails = _context9.sent;\n                            members = groupDetails.members;\n                            user_id = 0;\n                            _iteratorNormalCompletion = true;\n                            _didIteratorError = false;\n                            _iteratorError = undefined;\n                            _context9.prev = 9;\n                            _iterator = members[Symbol.iterator]();\n\n                        case 11:\n                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                                _context9.next = 20;\n                                break;\n                            }\n\n                            member = _step.value;\n\n                            console.log(member.nickname);\n\n                            if (!(args.username === member.nickname)) {\n                                _context9.next = 17;\n                                break;\n                            }\n\n                            user_id = member.user_id;\n                            return _context9.abrupt(\"break\", 20);\n\n                        case 17:\n                            _iteratorNormalCompletion = true;\n                            _context9.next = 11;\n                            break;\n\n                        case 20:\n                            _context9.next = 26;\n                            break;\n\n                        case 22:\n                            _context9.prev = 22;\n                            _context9.t0 = _context9[\"catch\"](9);\n                            _didIteratorError = true;\n                            _iteratorError = _context9.t0;\n\n                        case 26:\n                            _context9.prev = 26;\n                            _context9.prev = 27;\n\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n\n                        case 29:\n                            _context9.prev = 29;\n\n                            if (!_didIteratorError) {\n                                _context9.next = 32;\n                                break;\n                            }\n\n                            throw _iteratorError;\n\n                        case 32:\n                            return _context9.finish(29);\n\n                        case 33:\n                            return _context9.finish(26);\n\n                        case 34:\n                            if (!(user_id === 0)) {\n                                _context9.next = 37;\n                                break;\n                            }\n\n                            error = {\n                                code: 1001,\n                                message: \"User name not found.\"\n                            };\n                            throw error;\n\n                        case 37:\n                            _context9.next = 39;\n                            return callGetMessages(args);\n\n                        case 39:\n                            response = _context9.sent;\n                            messages = response.messages;\n                            last_seen = 0;\n                            _iteratorNormalCompletion2 = true;\n                            _didIteratorError2 = false;\n                            _iteratorError2 = undefined;\n                            _context9.prev = 45;\n\n                            for (_iterator2 = messages[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                                message = _step2.value;\n\n                                if (user_id === message.user_id) {\n                                    last_seen = message.created_at;\n                                }\n                            }\n                            _context9.next = 53;\n                            break;\n\n                        case 49:\n                            _context9.prev = 49;\n                            _context9.t1 = _context9[\"catch\"](45);\n                            _didIteratorError2 = true;\n                            _iteratorError2 = _context9.t1;\n\n                        case 53:\n                            _context9.prev = 53;\n                            _context9.prev = 54;\n\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n\n                        case 56:\n                            _context9.prev = 56;\n\n                            if (!_didIteratorError2) {\n                                _context9.next = 59;\n                                break;\n                            }\n\n                            throw _iteratorError2;\n\n                        case 59:\n                            return _context9.finish(56);\n\n                        case 60:\n                            return _context9.finish(53);\n\n                        case 61:\n                            output = {\n                                username: args.username,\n                                last_seen: new Date(last_seen)\n                            };\n                            return _context9.abrupt(\"return\", output);\n\n                        case 63:\n                        case \"end\":\n                            return _context9.stop();\n                    }\n                }\n            }, _callee9, undefined, [[9, 22, 26, 34], [27,, 29, 33], [45, 49, 53, 61], [54,, 56, 60]]);\n        }));\n\n        return function (_x18, _x19) {\n            return _ref9.apply(this, arguments);\n        };\n    }();\n};\n\nvar getHeartCount = exports.getHeartCount = function getHeartCount() {\n    return function () {\n        var _ref10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee10(_, args) {\n            var groupDetails, members, response, messages, heartCounts, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, member, count, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, message, heartCount;\n\n            return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                while (1) {\n                    switch (_context10.prev = _context10.next) {\n                        case 0:\n                            console.log(\"Function: getUserLastSeen\");\n                            _context10.next = 3;\n                            return callGroupDetails(args.token);\n\n                        case 3:\n                            groupDetails = _context10.sent;\n                            members = groupDetails.members;\n                            _context10.next = 7;\n                            return callGetMessages(args);\n\n                        case 7:\n                            response = _context10.sent;\n                            messages = response.messages;\n                            heartCounts = [];\n                            _iteratorNormalCompletion3 = true;\n                            _didIteratorError3 = false;\n                            _iteratorError3 = undefined;\n                            _context10.prev = 13;\n                            _iterator3 = members[Symbol.iterator]();\n\n                        case 15:\n                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                                _context10.next = 42;\n                                break;\n                            }\n\n                            member = _step3.value;\n                            count = 0;\n                            _iteratorNormalCompletion4 = true;\n                            _didIteratorError4 = false;\n                            _iteratorError4 = undefined;\n                            _context10.prev = 21;\n\n                            for (_iterator4 = messages[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                                message = _step4.value;\n\n                                if (member.user_id == message.user_id) {\n                                    count += message.favorited_by.length;\n                                }\n                            }\n\n                            _context10.next = 29;\n                            break;\n\n                        case 25:\n                            _context10.prev = 25;\n                            _context10.t0 = _context10[\"catch\"](21);\n                            _didIteratorError4 = true;\n                            _iteratorError4 = _context10.t0;\n\n                        case 29:\n                            _context10.prev = 29;\n                            _context10.prev = 30;\n\n                            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                _iterator4.return();\n                            }\n\n                        case 32:\n                            _context10.prev = 32;\n\n                            if (!_didIteratorError4) {\n                                _context10.next = 35;\n                                break;\n                            }\n\n                            throw _iteratorError4;\n\n                        case 35:\n                            return _context10.finish(32);\n\n                        case 36:\n                            return _context10.finish(29);\n\n                        case 37:\n                            heartCount = {\n                                username: member.nickname,\n                                count: count\n                            };\n\n                            heartCounts.push(heartCount);\n\n                        case 39:\n                            _iteratorNormalCompletion3 = true;\n                            _context10.next = 15;\n                            break;\n\n                        case 42:\n                            _context10.next = 48;\n                            break;\n\n                        case 44:\n                            _context10.prev = 44;\n                            _context10.t1 = _context10[\"catch\"](13);\n                            _didIteratorError3 = true;\n                            _iteratorError3 = _context10.t1;\n\n                        case 48:\n                            _context10.prev = 48;\n                            _context10.prev = 49;\n\n                            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                _iterator3.return();\n                            }\n\n                        case 51:\n                            _context10.prev = 51;\n\n                            if (!_didIteratorError3) {\n                                _context10.next = 54;\n                                break;\n                            }\n\n                            throw _iteratorError3;\n\n                        case 54:\n                            return _context10.finish(51);\n\n                        case 55:\n                            return _context10.finish(48);\n\n                        case 56:\n                            return _context10.abrupt(\"return\", heartCounts);\n\n                        case 57:\n                        case \"end\":\n                            return _context10.stop();\n                    }\n                }\n            }, _callee10, undefined, [[13, 44, 48, 56], [21, 25, 29, 37], [30,, 32, 36], [49,, 51, 55]]);\n        }));\n\n        return function (_x20, _x21) {\n            return _ref10.apply(this, arguments);\n        };\n    }();\n};\n\n// Brads shit\n\nvar getMessageWrapper = exports.getMessageWrapper = function () {\n    var _ref11 = _asyncToGenerator(regeneratorRuntime.mark(function _callee11(args) {\n        var data, response;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n            while (1) {\n                switch (_context11.prev = _context11.next) {\n                    case 0:\n                        _context11.t0 = JSON;\n                        _context11.next = 3;\n                        return groupMeApiGetMessages(args);\n\n                    case 3:\n                        _context11.t1 = _context11.sent;\n                        data = _context11.t0.parse.call(_context11.t0, _context11.t1);\n                        response = data.response;\n                        return _context11.abrupt(\"return\", response);\n\n                    case 7:\n                    case \"end\":\n                        return _context11.stop();\n                }\n            }\n        }, _callee11, undefined);\n    }));\n\n    return function getMessageWrapper(_x22) {\n        return _ref11.apply(this, arguments);\n    };\n}();\n\nvar groupMeApiGetMessages = exports.groupMeApiGetMessages = function () {\n    var _ref12 = _asyncToGenerator(regeneratorRuntime.mark(function _callee12(args) {\n        var uri, requestObject;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n            while (1) {\n                switch (_context12.prev = _context12.next) {\n                    case 0:\n                        console.log(\"Calling GroupMe API...\");\n\n                        uri = GROUP_ME_BASE_URL + \"groups/\" + args.group_id + \"/messages\" + \"?limit=\" + args.limit + \"&token=\" + args.token;\n\n                        if (args.before_id > 0) {\n                            uri = uri + \"&before_id=\" + args.before_id;\n                        }\n\n                        requestObject = {\n                            url: uri,\n                            method: \"GET\"\n                        };\n\n\n                        console.log(requestObject);\n\n                        return _context12.abrupt(\"return\", new Promise(function (resolve, reject) {\n                            //can't get 'await' to work with 'request'\n                            request(requestObject, function (error, response, body) {\n                                if (!error && response.statusCode === 200) {\n                                    resolve(body || response);\n                                } else {\n                                    console.log(\"Response:\" + response);\n                                    console.log(\"Error: \" + error);\n                                    resolve({ error: \"Empty Response\" });\n                                }\n                            });\n                        }));\n\n                    case 6:\n                    case \"end\":\n                        return _context12.stop();\n                }\n            }\n        }, _callee12, undefined);\n    }));\n\n    return function groupMeApiGetMessages(_x23) {\n        return _ref12.apply(this, arguments);\n    };\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsicmVxdWVzdCIsInJlcXVpcmUiLCJHUk9VUF9NRV9CQVNFX1VSTCIsImdldEdyb3VwRGV0YWlscyIsIl8iLCJhcmdzIiwiY29uc29sZSIsImxvZyIsImNhbGxHcm91cERldGFpbHMiLCJ0b2tlbiIsImdyb3VwIiwiZ2V0Qm90cyIsIkpTT04iLCJjYWxsR3JvdXBNZSIsImRhdGEiLCJwYXJzZSIsInJlc3BvbnNlIiwiZ2V0TWVzc2FnZXMiLCJjYWxsR2V0TWVzc2FnZXMiLCJnZXRXb3JkQ291bnQiLCJtZXNzYWdlcyIsImNvdW50IiwiaSIsImxlbmd0aCIsIm1lc3NhZ2UiLCJ0ZXh0IiwiaW5jbHVkZXMiLCJ3b3JkIiwiZ3JvdXBEZXRhaWxzIiwib3V0cHV0IiwiZ3JvdXBfbmFtZSIsIm5hbWUiLCJzZW5kQm90TWVzc2FnZSIsImZvcm1EYXRhIiwiYm90X2lkIiwiaWQiLCJzdWJVcmkiLCJyZXF1ZXN0X3R5cGUiLCJiZWZvcmVfaWQiLCJ1cmkiLCJyZXF1ZXN0T2JqZWN0IiwidXJsIiwibWV0aG9kIiwiZm9ybSIsImpzb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yIiwiYm9keSIsInN0YXR1c0NvZGUiLCJncm91cF9pZCIsIm1lbWJlcnMiLCJnZXRVc2VyTGFzdFNlZW4iLCJ1c2VyX2lkIiwibWVtYmVyIiwibmlja25hbWUiLCJ1c2VybmFtZSIsImNvZGUiLCJsYXN0X3NlZW4iLCJjcmVhdGVkX2F0IiwiRGF0ZSIsImdldEhlYXJ0Q291bnQiLCJoZWFydENvdW50cyIsImZhdm9yaXRlZF9ieSIsImhlYXJ0Q291bnQiLCJwdXNoIiwiZ2V0TWVzc2FnZVdyYXBwZXIiLCJncm91cE1lQXBpR2V0TWVzc2FnZXMiLCJsaW1pdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFNQyxvQkFBb0IsNkJBQTFCOztBQUVPLElBQU1DLDRDQUFr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QVFHLFFBQVFqQyxRQUFoQjtBQUNILGlDQUZELE1BRU87QUFDSFYsNENBQVFDLEdBQVIsQ0FBWSxjQUFjUyxRQUExQjtBQUNBViw0Q0FBUUMsR0FBUixDQUFZLFlBQVl5QyxLQUF4QjtBQUNBRiw0Q0FBUSxFQUFDRSxPQUFPLGdCQUFSLEVBQVI7QUFDSDtBQUNKLDZCQVJEO0FBU0gseUJBVk0sQ0FmMEI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBeEI7O0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBTiIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii9hcHAvZGF0YSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5jb25zdCBHUk9VUF9NRV9CQVNFX1VSTCA9IFwiaHR0cHM6Ly9hcGkuZ3JvdXBtZS5jb20vdjMvXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRHcm91cERldGFpbHMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBhc3luYyAoXywgYXJncykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZ1bmN0aW9uOiBnZXRHcm91cERldGFpbHNcIik7XG4gICAgICAgIGxldCBncm91cCA9IGF3YWl0IGNhbGxHcm91cERldGFpbHMoYXJncy50b2tlbik7XG4gICAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRCb3RzID0gKCkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoXywgYXJncykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZ1bmN0aW9uOiBnZXRCb3RzXCIpO1xuICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoYXdhaXQgY2FsbEdyb3VwTWUoXCJib3RzXCIsIGFyZ3MudG9rZW4sIFwiR0VUXCIsIHt9KSk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGRhdGEucmVzcG9uc2U7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRNZXNzYWdlcyA9ICgpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKF8sIGFyZ3MpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJGdW5jdGlvbjogZ2V0TWVzc2FnZXNcIik7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGNhbGxHZXRNZXNzYWdlcyhhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldFdvcmRDb3VudCA9ICgpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKF8sIGFyZ3MpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJGdW5jdGlvbjogZ2V0V29yZENvdW50XCIpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBjYWxsR2V0TWVzc2FnZXMoYXJncyk7XG4gICAgICAgIGxldCBtZXNzYWdlcyA9IHJlc3BvbnNlLm1lc3NhZ2VzO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgbGV0IHRleHQgPSBtZXNzYWdlLnRleHQ7XG4gICAgICAgICAgICBpZiAodGV4dC5pbmNsdWRlcyhhcmdzLndvcmQpKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBncm91cERldGFpbHMgPSBhd2FpdCBjYWxsR3JvdXBEZXRhaWxzKGFyZ3MudG9rZW4pO1xuICAgICAgICBsZXQgb3V0cHV0ID0ge1xuICAgICAgICAgICAgZ3JvdXBfbmFtZTogZ3JvdXBEZXRhaWxzLm5hbWUsXG4gICAgICAgICAgICB3b3JkOiBhcmdzLndvcmQsXG4gICAgICAgICAgICBjb3VudDogY291bnRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cblxuXG5leHBvcnQgY29uc3Qgc2VuZEJvdE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChfLCBhcmdzKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRnVuY3Rpb246IHNlbmRCb3RNZXNzYWdlXCIpO1xuICAgICAgICBsZXQgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICBib3RfaWQ6IGFyZ3MuYm90X2lkLFxuICAgICAgICAgICAgdGV4dDogYXJncy50ZXh0XG4gICAgICAgIH07XG4gICAgICAgIGxldCBkYXRhID0gYXdhaXQgY2FsbEdyb3VwTWUoXCJib3RzL3Bvc3RcIiwgYXJncy50b2tlbiwgXCJQT1NUXCIsIGZvcm1EYXRhKTtcblxuICAgICAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgYm90X2lkOiBhcmdzLmJvdF9pZCxcbiAgICAgICAgICAgIHRleHQ6IGFyZ3MudGV4dFxuICAgICAgICB9O1xuXG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgY2FsbEdyb3VwTWUgPSBhc3luYyAoc3ViVXJpLCB0b2tlbiwgcmVxdWVzdF90eXBlLCBmb3JtRGF0YSwgYmVmb3JlX2lkKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJDYWxsaW5nIEdyb3VwTWUgQVBJLi4uXCIpO1xuXG4gICAgbGV0IHVyaSA9IEdST1VQX01FX0JBU0VfVVJMICsgc3ViVXJpICsgXCI/bGltaXQ9MTAwJnRva2VuPVwiICsgdG9rZW47XG4gICAgaWYgKGJlZm9yZV9pZCA+IDApIHtcbiAgICAgICAgdXJpID0gdXJpICsgXCImYmVmb3JlX2lkPVwiICsgYmVmb3JlX2lkO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0T2JqZWN0ID0ge1xuICAgICAgICB1cmw6IHVyaSxcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0X3R5cGUsXG4gICAgfVxuICAgIGlmIChyZXF1ZXN0X3R5cGUgPT09IFwiUE9TVFwiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGZvcm1EYXRhKTtcbiAgICAgICAgcmVxdWVzdE9iamVjdC5mb3JtID0gZm9ybURhdGE7XG4gICAgICAgIHJlcXVlc3RPYmplY3QuanNvbiA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2cocmVxdWVzdE9iamVjdCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyAvL2Nhbid0IGdldCAnYXdhaXQnIHRvIHdvcmsgd2l0aCAncmVxdWVzdCdcbiAgICAgICAgcmVxdWVzdChyZXF1ZXN0T2JqZWN0LCAoZXJyb3IsIHJlc3BvbnNlLCBib2R5KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYm9keSB8fCByZXNwb25zZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVzcG9uc2U6XCIgKyByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7ZXJyb3I6IFwiRW1wdHkgUmVzcG9uc2VcIn0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pO1xufVxuXG5leHBvcnQgY29uc3QgY2FsbEdyb3VwRGV0YWlscyA9IGFzeW5jICh0b2tlbikgPT4ge1xuICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShhd2FpdCBjYWxsR3JvdXBNZShcImdyb3Vwc1wiLCB0b2tlbiwgXCJHRVRcIiwge30pKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBkYXRhLnJlc3BvbnNlWzBdO1xuICAgIGxldCBncm91cCA9IHtcbiAgICAgICAgaWQ6IHJlc3BvbnNlLmlkLFxuICAgICAgICBncm91cF9pZDogcmVzcG9uc2UuZ3JvdXBfaWQsXG4gICAgICAgIG5hbWU6IHJlc3BvbnNlLm5hbWUsXG4gICAgICAgIG1lbWJlcnM6IHJlc3BvbnNlLm1lbWJlcnNcbiAgICB9O1xuICAgIHJldHVybiBncm91cDtcbn1cblxuXG5leHBvcnQgY29uc3QgY2FsbEdldE1lc3NhZ2VzID0gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoYXdhaXQgY2FsbEdyb3VwTWUoXCJncm91cHMvXCIgKyBhcmdzLmdyb3VwX2lkICsgXCIvbWVzc2FnZXNcIiwgYXJncy50b2tlbiwgXCJHRVRcIiwge30sIGFyZ3MuYmVmb3JlX2lkKSk7XG4gICAgbGV0IHJlc3BvbnNlID0gZGF0YS5yZXNwb25zZTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyTGFzdFNlZW4gPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChfLCBhcmdzKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRnVuY3Rpb246IGdldFVzZXJMYXN0U2VlblwiKTtcbiAgICAgICAgbGV0IGdyb3VwRGV0YWlscyA9IGF3YWl0IGNhbGxHcm91cERldGFpbHMoYXJncy50b2tlbik7XG4gICAgICAgIGxldCBtZW1iZXJzID0gZ3JvdXBEZXRhaWxzLm1lbWJlcnM7XG4gICAgICAgIGxldCB1c2VyX2lkID0gMDtcbiAgICAgICAgZm9yIChsZXQgbWVtYmVyIG9mIG1lbWJlcnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lbWJlci5uaWNrbmFtZSk7XG4gICAgICAgICAgICBpZiAoYXJncy51c2VybmFtZSA9PT0gbWVtYmVyLm5pY2tuYW1lKSB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZCA9IG1lbWJlci51c2VyX2lkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJfaWQgPT09IDApIHtcbiAgICAgICAgICAgIGxldCBlcnJvciA9IHtcbiAgICAgICAgICAgICAgICBjb2RlOiAxMDAxLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVXNlciBuYW1lIG5vdCBmb3VuZC5cIlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgY2FsbEdldE1lc3NhZ2VzKGFyZ3MpO1xuXG4gICAgICAgIGxldCBtZXNzYWdlcyA9IHJlc3BvbnNlLm1lc3NhZ2VzO1xuXG4gICAgICAgIGxldCBsYXN0X3NlZW4gPSAwO1xuICAgICAgICBmb3IgKGxldCBtZXNzYWdlIG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBpZiAodXNlcl9pZCA9PT0gbWVzc2FnZS51c2VyX2lkKSB7XG4gICAgICAgICAgICAgICAgbGFzdF9zZWVuID0gbWVzc2FnZS5jcmVhdGVkX2F0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBvdXRwdXQgPSB7XG4gICAgICAgICAgICB1c2VybmFtZTogYXJncy51c2VybmFtZSxcbiAgICAgICAgICAgIGxhc3Rfc2VlbjogbmV3IERhdGUobGFzdF9zZWVuKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldEhlYXJ0Q291bnQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChfLCBhcmdzKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRnVuY3Rpb246IGdldFVzZXJMYXN0U2VlblwiKTtcbiAgICAgICAgbGV0IGdyb3VwRGV0YWlscyA9IGF3YWl0IGNhbGxHcm91cERldGFpbHMoYXJncy50b2tlbik7XG4gICAgICAgIGxldCBtZW1iZXJzID0gZ3JvdXBEZXRhaWxzLm1lbWJlcnM7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGNhbGxHZXRNZXNzYWdlcyhhcmdzKTtcbiAgICAgICAgbGV0IG1lc3NhZ2VzID0gcmVzcG9uc2UubWVzc2FnZXM7XG4gICAgICAgIGxldCBoZWFydENvdW50cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBtZW1iZXIgb2YgbWVtYmVycykge1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVtYmVyLnVzZXJfaWQgPT0gbWVzc2FnZS51c2VyX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IG1lc3NhZ2UuZmF2b3JpdGVkX2J5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBoZWFydENvdW50ID0ge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBtZW1iZXIubmlja25hbWUsXG4gICAgICAgICAgICAgICAgY291bnQ6IGNvdW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFydENvdW50cy5wdXNoKGhlYXJ0Q291bnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhlYXJ0Q291bnRzO1xuICAgIH1cbn1cblxuXG4vLyBCcmFkcyBzaGl0XG5cbmV4cG9ydCBjb25zdCBnZXRNZXNzYWdlV3JhcHBlciA9IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGF3YWl0IGdyb3VwTWVBcGlHZXRNZXNzYWdlcyggYXJncyApKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBkYXRhLnJlc3BvbnNlO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuXG5leHBvcnQgY29uc3QgZ3JvdXBNZUFwaUdldE1lc3NhZ2VzID0gYXN5bmMgKCBhcmdzICkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ2FsbGluZyBHcm91cE1lIEFQSS4uLlwiKTtcblxuICAgIGxldCB1cmkgPSBHUk9VUF9NRV9CQVNFX1VSTCArIFwiZ3JvdXBzL1wiICsgYXJncy5ncm91cF9pZCArIFwiL21lc3NhZ2VzXCIgKyBcIj9saW1pdD1cIithcmdzLmxpbWl0KyBcIiZ0b2tlbj1cIiArIGFyZ3MudG9rZW47XG4gICAgaWYgKGFyZ3MuYmVmb3JlX2lkID4gMCkge1xuICAgICAgICB1cmkgPSB1cmkgKyBcIiZiZWZvcmVfaWQ9XCIgKyBhcmdzLmJlZm9yZV9pZDtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdE9iamVjdCA9IHtcbiAgICAgICAgdXJsOiB1cmksXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhyZXF1ZXN0T2JqZWN0KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IC8vY2FuJ3QgZ2V0ICdhd2FpdCcgdG8gd29yayB3aXRoICdyZXF1ZXN0J1xuICAgICAgICByZXF1ZXN0KHJlcXVlc3RPYmplY3QsIChlcnJvciwgcmVzcG9uc2UsIGJvZHkpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyb3IgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShib2R5IHx8IHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXNwb25zZTpcIiArIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHtlcnJvcjogXCJFbXB0eSBSZXNwb25zZVwifSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSk7XG59XG4iXX0=",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "helpers.js"
      ],
      "names": [
        "request",
        "require",
        "GROUP_ME_BASE_URL",
        "getGroupDetails",
        "_",
        "args",
        "console",
        "log",
        "callGroupDetails",
        "token",
        "group",
        "getBots",
        "JSON",
        "callGroupMe",
        "data",
        "parse",
        "response",
        "getMessages",
        "callGetMessages",
        "getWordCount",
        "messages",
        "count",
        "i",
        "length",
        "message",
        "text",
        "includes",
        "word",
        "groupDetails",
        "output",
        "group_name",
        "name",
        "sendBotMessage",
        "formData",
        "bot_id",
        "id",
        "subUri",
        "request_type",
        "before_id",
        "uri",
        "requestObject",
        "url",
        "method",
        "form",
        "json",
        "Promise",
        "resolve",
        "reject",
        "error",
        "body",
        "statusCode",
        "group_id",
        "members",
        "getUserLastSeen",
        "user_id",
        "member",
        "nickname",
        "username",
        "code",
        "last_seen",
        "created_at",
        "Date",
        "getHeartCount",
        "heartCounts",
        "favorited_by",
        "heartCount",
        "push",
        "getMessageWrapper",
        "groupMeApiGetMessages",
        "limit"
      ],
      "mappings": "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",
      "file": "helpers.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "const request = require('request');\nconst GROUP_ME_BASE_URL = \"https://api.groupme.com/v3/\";\n\nexport const getGroupDetails = () => {\n        return async (_, args) => {\n        console.log(\"Function: getGroupDetails\");\n        let group = await callGroupDetails(args.token);\n        return group;\n    }\n}\n\nexport const getBots = () => {\n    return async (_, args) => {\n        console.log(\"Function: getBots\");\n        let data = JSON.parse(await callGroupMe(\"bots\", args.token, \"GET\", {}));\n        let response = data.response;\n        return response;\n    }\n}\n\nexport const getMessages = () => {\n    return async (_, args) => {\n        console.log(\"Function: getMessages\");\n        let response = await callGetMessages(args);\n        return response;\n    }\n}\n\nexport const getWordCount = () => {\n    return async (_, args) => {\n        console.log(\"Function: getWordCount\");\n        let response = await callGetMessages(args);\n        let messages = response.messages;\n        let count = 0;\n        for (let i = 0; i < messages.length; i++) {\n            let message = messages[i];\n            let text = message.text;\n            if (text.includes(args.word)) {\n                count++;\n            }\n        }\n\n        let groupDetails = await callGroupDetails(args.token);\n        let output = {\n            group_name: groupDetails.name,\n            word: args.word,\n            count: count\n        }\n        return output;\n    }\n}\n\n\nexport const sendBotMessage = () => {\n    return async (_, args) => {\n        console.log(\"Function: sendBotMessage\");\n        let formData = {\n            bot_id: args.bot_id,\n            text: args.text\n        };\n        let data = await callGroupMe(\"bots/post\", args.token, \"POST\", formData);\n\n        let message = {\n            id: 1,\n            bot_id: args.bot_id,\n            text: args.text\n        };\n\n\n        return message;\n    }\n}\n\nexport const callGroupMe = async (subUri, token, request_type, formData, before_id) => {\n    console.log(\"Calling GroupMe API...\");\n\n    let uri = GROUP_ME_BASE_URL + subUri + \"?limit=100&token=\" + token;\n    if (before_id > 0) {\n        uri = uri + \"&before_id=\" + before_id;\n    }\n\n    let requestObject = {\n        url: uri,\n        method: request_type,\n    }\n    if (request_type === \"POST\") {\n        console.log(formData);\n        requestObject.form = formData;\n        requestObject.json = true;\n    }\n\n    console.log(requestObject);\n\n    return new Promise(function (resolve, reject) { //can't get 'await' to work with 'request'\n        request(requestObject, (error, response, body) => {\n            if (!error && response.statusCode === 200) {\n                resolve(body || response);\n            } else {\n                console.log(\"Response:\" + response);\n                console.log(\"Error: \" + error);\n                resolve({error: \"Empty Response\"});\n            }\n        })\n    });\n}\n\nexport const callGroupDetails = async (token) => {\n    let data = JSON.parse(await callGroupMe(\"groups\", token, \"GET\", {}));\n    let response = data.response[0];\n    let group = {\n        id: response.id,\n        group_id: response.group_id,\n        name: response.name,\n        members: response.members\n    };\n    return group;\n}\n\n\nexport const callGetMessages = async (args) => {\n    let data = JSON.parse(await callGroupMe(\"groups/\" + args.group_id + \"/messages\", args.token, \"GET\", {}, args.before_id));\n    let response = data.response;\n    return response;\n}\n\nexport const getUserLastSeen = () => {\n    return async (_, args) => {\n        console.log(\"Function: getUserLastSeen\");\n        let groupDetails = await callGroupDetails(args.token);\n        let members = groupDetails.members;\n        let user_id = 0;\n        for (let member of members) {\n            console.log(member.nickname);\n            if (args.username === member.nickname) {\n                user_id = member.user_id;\n                break;\n            }\n        }\n\n        if (user_id === 0) {\n            let error = {\n                code: 1001,\n                message: \"User name not found.\"\n            }\n\n            throw error;\n        }\n\n\n        let response = await callGetMessages(args);\n\n        let messages = response.messages;\n\n        let last_seen = 0;\n        for (let message of messages) {\n            if (user_id === message.user_id) {\n                last_seen = message.created_at;\n            }\n        }\n        let output = {\n            username: args.username,\n            last_seen: new Date(last_seen)\n        };\n        return output;\n    }\n}\n\nexport const getHeartCount = () => {\n    return async (_, args) => {\n        console.log(\"Function: getUserLastSeen\");\n        let groupDetails = await callGroupDetails(args.token);\n        let members = groupDetails.members;\n        let response = await callGetMessages(args);\n        let messages = response.messages;\n        let heartCounts = [];\n        for (let member of members) {\n            let count = 0;\n            for (let message of messages) {\n                if (member.user_id == message.user_id) {\n                    count += message.favorited_by.length;\n                }\n            }\n\n            let heartCount = {\n                username: member.nickname,\n                count: count\n            }\n            heartCounts.push(heartCount);\n        }\n\n        return heartCounts;\n    }\n}\n\n\n// Brads shit\n\nexport const getMessageWrapper = async (args) => {\n    let data = JSON.parse(await groupMeApiGetMessages( args ));\n    let response = data.response;\n    return response;\n}\n\n\nexport const groupMeApiGetMessages = async ( args ) => {\n    console.log(\"Calling GroupMe API...\");\n\n    let uri = GROUP_ME_BASE_URL + \"groups/\" + args.group_id + \"/messages\" + \"?limit=\"+args.limit+ \"&token=\" + args.token;\n    if (args.before_id > 0) {\n        uri = uri + \"&before_id=\" + args.before_id;\n    }\n\n    let requestObject = {\n        url: uri,\n        method: \"GET\",\n    }\n\n    console.log(requestObject);\n\n    return new Promise(function (resolve, reject) { //can't get 'await' to work with 'request'\n        request(requestObject, (error, response, body) => {\n            if (!error && response.statusCode === 200) {\n                resolve(body || response);\n            } else {\n                console.log(\"Response:\" + response);\n                console.log(\"Error: \" + error);\n                resolve({error: \"Empty Response\"});\n            }\n        })\n    });\n}\n"
      ]
    },
    "mtime": 1508231153630
  },
  "{\"filename\":\"/app/data/resolver_mutation.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "interopRequireWildcard"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "./helpers",
            "imported": [
              "*"
            ],
            "specifiers": [
              {
                "kind": "namespace",
                "local": "helpers"
              }
            ]
          }
        ],
        "exports": {
          "exported": [
            "resolver_mutations"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "resolver_mutations",
              "exported": "resolver_mutations"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/resolver_mutation.js",
      "filenameRelative": "/app/data/resolver_mutation.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "resolver_mutation.js",
      "sourceFileName": "resolver_mutation.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "resolver_mutation"
    },
    "ignored": false,
    "code": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.resolver_mutations = undefined;\n\nvar _helpers = require('./helpers');\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar resolver_mutations = exports.resolver_mutations = function resolver_mutations() {\n    return {\n        sendBotMessage: helpers.sendBotMessage()\n    };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVyX211dGF0aW9uLmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJyZXNvbHZlcl9tdXRhdGlvbnMiLCJzZW5kQm90TWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztJQUFZQSxPOzs7O0FBRUwsSUFBTUMsa0RBQXFCLFNBQXJCQSxrQkFBcUIsR0FBWTtBQUMxQyxXQUFPO0FBQ0hDLHdCQUFnQkYsUUFBUUUsY0FBUjtBQURiLEtBQVA7QUFHSCxDQUpNIiwiZmlsZSI6InJlc29sdmVyX211dGF0aW9uLmpzIiwic291cmNlUm9vdCI6Ii9hcHAvZGF0YSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnXG5cbmV4cG9ydCBjb25zdCByZXNvbHZlcl9tdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VuZEJvdE1lc3NhZ2U6IGhlbHBlcnMuc2VuZEJvdE1lc3NhZ2UoKVxuICAgIH1cbn0iXX0=",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "resolver_mutation.js"
      ],
      "names": [
        "helpers",
        "resolver_mutations",
        "sendBotMessage"
      ],
      "mappings": ";;;;;;;AACA;;IAAYA,O;;;;AAEL,IAAMC,kDAAqB,SAArBA,kBAAqB,GAAY;AAC1C,WAAO;AACHC,wBAAgBF,QAAQE,cAAR;AADb,KAAP;AAGH,CAJM",
      "file": "resolver_mutation.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "\nimport * as helpers from './helpers'\n\nexport const resolver_mutations = function () {\n    return {\n        sendBotMessage: helpers.sendBotMessage()\n    }\n}"
      ]
    },
    "mtime": 1508231153650
  },
  "{\"filename\":\"/app/data/relationship.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator"
      ],
      "marked": [],
      "modules": {
        "imports": [],
        "exports": {
          "exported": [
            "groupRelationship",
            "messagesRelationship"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "groupRelationship",
              "exported": "groupRelationship"
            },
            {
              "kind": "local",
              "local": "messagesRelationship",
              "exported": "messagesRelationship"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/relationship.js",
      "filenameRelative": "/app/data/relationship.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "relationship.js",
      "sourceFileName": "relationship.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "relationship"
    },
    "ignored": false,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar groupRelationship = exports.groupRelationship = function groupRelationship() {\n    return {\n        members: function members(data) {\n            var _this = this;\n\n            return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                return _context.abrupt(\"return\", data.members);\n\n                            case 1:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, _this);\n            }))();\n        }\n    };\n};\n\nvar messagesRelationship = exports.messagesRelationship = function messagesRelationship() {\n    return {\n        messages: function messages(data) {\n            var _this2 = this;\n\n            return _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                return _context2.abrupt(\"return\", data.messages);\n\n                            case 1:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, _this2);\n            }))();\n        }\n    };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbGF0aW9uc2hpcC5qcyJdLCJuYW1lcyI6WyJncm91cFJlbGF0aW9uc2hpcCIsIm1lbWJlcnMiLCJkYXRhIiwibWVzc2FnZXNSZWxhdGlvbnNoaXAiLCJtZXNzYWdlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDTyxJQUFNQSxnREFBb0IsU0FBcEJBLGlCQUFvQixHQUFNO0FBQ25DLFdBQU87QUFDR0MsZUFESCxtQkFDV0MsSUFEWCxFQUNnQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxpRUFDUkEsS0FBS0QsT0FERzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVsQjtBQUhFLEtBQVA7QUFLSCxDQU5NOztBQVFBLElBQU1FLHNEQUF1QixTQUF2QkEsb0JBQXVCLEdBQU07QUFDdEMsV0FBTztBQUNHQyxnQkFESCxvQkFDWUYsSUFEWixFQUNpQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxrRUFDVEEsS0FBS0UsUUFESTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVuQjtBQUhFLEtBQVA7QUFLSCxDQU5NIiwiZmlsZSI6InJlbGF0aW9uc2hpcC5qcyIsInNvdXJjZVJvb3QiOiIvYXBwL2RhdGEiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjb25zdCBncm91cFJlbGF0aW9uc2hpcCA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhc3luYyBtZW1iZXJzKGRhdGEpe1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubWVtYmVycztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VzUmVsYXRpb25zaGlwID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIG1lc3NhZ2VzKGRhdGEpe1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubWVzc2FnZXM7XG4gICAgICAgIH1cbiAgICB9XG59Il19",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "relationship.js"
      ],
      "names": [
        "groupRelationship",
        "members",
        "data",
        "messagesRelationship",
        "messages"
      ],
      "mappings": ";;;;;;;;AACO,IAAMA,gDAAoB,SAApBA,iBAAoB,GAAM;AACnC,WAAO;AACGC,eADH,mBACWC,IADX,EACgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEACRA,KAAKD,OADG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAElB;AAHE,KAAP;AAKH,CANM;;AAQA,IAAME,sDAAuB,SAAvBA,oBAAuB,GAAM;AACtC,WAAO;AACGC,gBADH,oBACYF,IADZ,EACiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEACTA,KAAKE,QADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnB;AAHE,KAAP;AAKH,CANM",
      "file": "relationship.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "\nexport const groupRelationship = () => {\n    return {\n        async members(data){\n            return data.members;\n        }\n    }\n}\n\nexport const messagesRelationship = () => {\n    return {\n        async messages(data){\n            return data.messages;\n        }\n    }\n}"
      ]
    },
    "mtime": 1508231153642
  },
  "{\"filename\":\"/app/data/GraphMeUtils.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator",
        "interopRequireWildcard"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "./helpers",
            "imported": [
              "*"
            ],
            "specifiers": [
              {
                "kind": "namespace",
                "local": "helpers"
              }
            ]
          },
          {
            "source": "./PersonalityInsights",
            "imported": [
              "*"
            ],
            "specifiers": [
              {
                "kind": "namespace",
                "local": "PersonalityInsights"
              }
            ]
          }
        ],
        "exports": {
          "exported": [
            "postBotMessage",
            "getAllMessages",
            "countWords",
            "groupMeWordCount",
            "isEmpty",
            "getMessages"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "postBotMessage",
              "exported": "postBotMessage"
            },
            {
              "kind": "local",
              "local": "getAllMessages",
              "exported": "getAllMessages"
            },
            {
              "kind": "local",
              "local": "countWords",
              "exported": "countWords"
            },
            {
              "kind": "local",
              "local": "groupMeWordCount",
              "exported": "groupMeWordCount"
            },
            {
              "kind": "local",
              "local": "isEmpty",
              "exported": "isEmpty"
            },
            {
              "kind": "local",
              "local": "getMessages",
              "exported": "getMessages"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/GraphMeUtils.js",
      "filenameRelative": "/app/data/GraphMeUtils.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "GraphMeUtils.js",
      "sourceFileName": "GraphMeUtils.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "GraphMeUtils"
    },
    "ignored": false,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getMessages = exports.isEmpty = exports.groupMeWordCount = exports.countWords = exports.getAllMessages = exports.postBotMessage = undefined;\n\nvar _helpers = require(\"./helpers\");\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _PersonalityInsights = require(\"./PersonalityInsights\");\n\nvar PersonalityInsights = _interopRequireWildcard(_PersonalityInsights);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar ACCESS_TOKEN = process.env.ACCESS_TOKEN;\nvar BOT_ID = process.env.BOT_ID;\nvar GROUP_ID = process.env.GROUP_ID;\nvar API = require('groupme').Stateless;\n\n// when we receive a message\nvar postBotMessage = exports.postBotMessage = function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(req) {\n        var consoleMessage, botMessage, sender_type, text, randomText, id, textArray, messages, word, wordCount, totalWords, _textArray, hasNumber, hasUnits, numHours, plural, unitsInText, units, _messages, groupDetails, members, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, member, totalHumanMessages, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, message, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _member, stats, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _member2, added, i, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, stat, botCount, _textArray2, _hasNumber, _hasUnits, _numHours, _plural, _unitsInText, _units, _messages2, _groupDetails, _members, heartCounts, groupTotal, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _member3, count, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _message, heartCount, userTotal, _added, _i, user_id, last_seen, _messages3, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _message2, dateF, sinceHours, _messages4, _user_id, dateNow, contentItems, _i2, username, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, _message3, dateMsg, hourDiff, personalityInsights, _id, _textArray3, _hasNumber2, _hasUnits2, _numHours2, _plural2, _unitsInText2, _units2, _messages5, _groupDetails2, _members2, _stats, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, memberA, _iteratorNormalCompletion13, _didIteratorError13, _iteratorError13, _iterator13, _step13, memberB, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _message4, _iteratorNormalCompletion14, _didIteratorError14, _iteratorError14, _iterator14, _step14, heart, _iteratorNormalCompletion12, _didIteratorError12, _iteratorError12, _iterator12, _step12, _memberA, _stat, _iteratorNormalCompletion15, _didIteratorError15, _iteratorError15, _iterator15, _step15, _memberB, opts;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        console.log(\"Request Payload\");\n                        console.log(req.body);\n                        consoleMessage = \"\";\n                        botMessage = \"\";\n                        sender_type = req.body.sender_type;\n                        text = isEmpty(req.body.text) ? req.body.text : req.body.text.trim();\n\n                        // if from a bot, ignore it\n\n                        if (!(sender_type === \"bot\")) {\n                            _context.next = 10;\n                            break;\n                        }\n\n                        console.log(\"No action..\");\n\n                        // else if it's from a user\n                        _context.next = 529;\n                        break;\n\n                    case 10:\n                        if (!(sender_type === \"user\")) {\n                            _context.next = 529;\n                            break;\n                        }\n\n                        // convert all text to lowercase for easier parsing\n                        text = text.toLowerCase();\n\n                        if (!['hi', 'hello'].includes(text)) {\n                            _context.next = 19;\n                            break;\n                        }\n\n                        // library of responses to the above 'if'\n                        randomText = ['Hi, I am the ArmBot', 'Hello you bitch, you!', 'Seh-hent', 'Oooooop!', 'My shoes are ruined!', 'I was caught in a starm', 'Hello, Rouis.', 'We are all Blue Henns!', 'Smells like my asshole bro..', 'Uhhghh!! Can I get my face backkk?!'];\n                        // pick a random index and spit it back\n\n                        id = Math.round(Math.random() * (randomText.length - 1));\n\n                        botMessage = randomText[id];\n                        consoleMessage = \"Bot sent hi reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 19:\n                        if (!text.includes(\"/wordcount\")) {\n                            _context.next = 41;\n                            break;\n                        }\n\n                        textArray = text.split(\" \");\n                        _context.next = 23;\n                        return getAllMessages();\n\n                    case 23:\n                        messages = _context.sent;\n\n\n                        console.log(\"Command length: \" + textArray.length);\n\n                        if (!(textArray.length > 1)) {\n                            _context.next = 34;\n                            break;\n                        }\n\n                        word = textArray[1];\n\n                        console.log(\"Count word instances: \" + word);\n                        _context.next = 30;\n                        return groupMeWordCount(messages, word);\n\n                    case 30:\n                        wordCount = _context.sent;\n\n                        botMessage = \"\\\"\" + word + \"\\\" was said \" + wordCount.toString() + \" times\";\n                        _context.next = 38;\n                        break;\n\n                    case 34:\n                        _context.next = 36;\n                        return countWords(messages);\n\n                    case 36:\n                        totalWords = _context.sent;\n\n                        botMessage = \"Total words of all time: \" + totalWords;\n\n                    case 38:\n                        consoleMessage = \"Bot sent a word count reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 41:\n                        if (!text.includes(\"/messages\")) {\n                            _context.next = 185;\n                            break;\n                        }\n\n                        // this whole thing needs checks to make sure the syntax is:\n                        // syntax:   /hearts number units\n                        // example:  /hearts 5 days\n\n                        // pop the command into an array\n                        _textArray = text.split(\" \");\n                        // if length is greater than 1 we have a number\n\n                        hasNumber = _textArray.length > 1;\n                        // if length is greater than 2 we have units\n\n                        hasUnits = _textArray.length > 2;\n\n                        // if we don't have a number, numHours = 0\n\n                        numHours = hasNumber ? _textArray[1] : 0;\n                        // if we have units, use the units as a mulitplier\n\n                        // plural will be 1 if we are asking for more than 1 of a unit\n\n                        plural = numHours == 1 ? 0 : 1;\n\n                        // default unitsInText\n\n                        unitsInText = numHours + \" hour\";\n\n\n                        if (hasUnits) {\n                            units = _textArray[2];\n\n\n                            if (units.includes(\"hour\")) {\n                                // do nothing\n                            } else if (units.includes(\"day\")) {\n                                // 24 hours in a day\n                                unitsInText = numHours + \" day\";\n                                numHours *= 24;\n                            } else if (units.includes(\"week\")) {\n                                // 7 days in a week\n                                unitsInText = numHours + \" week\";\n                                numHours *= 24 * 7;\n                            } else if (units.includes(\"month\")) {\n                                // 4 weeks in (most) months\n                                unitsInText = numHours + \" month\";\n                                numHours *= 24 * 7 * 4;\n                            } else if (units.includes(\"year\")) {\n                                // 365 days in a year\n                                unitsInText = numHours + \" year\";\n                                numHours *= 24 * 365;\n                            }\n                        }\n                        if (plural) {\n                            unitsInText += \"s\";\n                        }\n\n                        // if no time entered, modify to ask for ALL TIME\n                        if (numHours === 0) {\n                            numHours = new Date().getTime() / (1000 * 3600) - 1;\n                            botMessage = \"Messages Sent All Time\\n\\n\";\n                        } else {\n                            botMessage = \"Messages Sent In The Last: \" + unitsInText + \"\\n\\n\";\n                        }\n\n                        // request the messages from N seconds ago till now\n                        _context.next = 53;\n                        return getMessages(numHours * 3600);\n\n                    case 53:\n                        _messages = _context.sent;\n                        _context.next = 56;\n                        return helpers.callGroupDetails(ACCESS_TOKEN);\n\n                    case 56:\n                        groupDetails = _context.sent;\n                        members = groupDetails.members;\n\n                        // create a 'message count' field for each member\n\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _iteratorError = undefined;\n                        _context.prev = 61;\n                        for (_iterator = members[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            member = _step.value;\n\n                            member.message_count = 0;\n                        }\n\n                        // loop through all the messages and increment the users messages count\n                        _context.next = 69;\n                        break;\n\n                    case 65:\n                        _context.prev = 65;\n                        _context.t0 = _context[\"catch\"](61);\n                        _didIteratorError = true;\n                        _iteratorError = _context.t0;\n\n                    case 69:\n                        _context.prev = 69;\n                        _context.prev = 70;\n\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n\n                    case 72:\n                        _context.prev = 72;\n\n                        if (!_didIteratorError) {\n                            _context.next = 75;\n                            break;\n                        }\n\n                        throw _iteratorError;\n\n                    case 75:\n                        return _context.finish(72);\n\n                    case 76:\n                        return _context.finish(69);\n\n                    case 77:\n                        totalHumanMessages = 0;\n                        _iteratorNormalCompletion2 = true;\n                        _didIteratorError2 = false;\n                        _iteratorError2 = undefined;\n                        _context.prev = 81;\n                        _iterator2 = _messages[Symbol.iterator]();\n\n                    case 83:\n                        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                            _context.next = 107;\n                            break;\n                        }\n\n                        message = _step2.value;\n                        _iteratorNormalCompletion5 = true;\n                        _didIteratorError5 = false;\n                        _iteratorError5 = undefined;\n                        _context.prev = 88;\n\n                        for (_iterator5 = members[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                            _member = _step5.value;\n\n                            if (_member.user_id == message.user_id) {\n                                totalHumanMessages++;\n                                _member.message_count++;\n                            }\n                        }\n                        _context.next = 96;\n                        break;\n\n                    case 92:\n                        _context.prev = 92;\n                        _context.t1 = _context[\"catch\"](88);\n                        _didIteratorError5 = true;\n                        _iteratorError5 = _context.t1;\n\n                    case 96:\n                        _context.prev = 96;\n                        _context.prev = 97;\n\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n\n                    case 99:\n                        _context.prev = 99;\n\n                        if (!_didIteratorError5) {\n                            _context.next = 102;\n                            break;\n                        }\n\n                        throw _iteratorError5;\n\n                    case 102:\n                        return _context.finish(99);\n\n                    case 103:\n                        return _context.finish(96);\n\n                    case 104:\n                        _iteratorNormalCompletion2 = true;\n                        _context.next = 83;\n                        break;\n\n                    case 107:\n                        _context.next = 113;\n                        break;\n\n                    case 109:\n                        _context.prev = 109;\n                        _context.t2 = _context[\"catch\"](81);\n                        _didIteratorError2 = true;\n                        _iteratorError2 = _context.t2;\n\n                    case 113:\n                        _context.prev = 113;\n                        _context.prev = 114;\n\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n\n                    case 116:\n                        _context.prev = 116;\n\n                        if (!_didIteratorError2) {\n                            _context.next = 119;\n                            break;\n                        }\n\n                        throw _iteratorError2;\n\n                    case 119:\n                        return _context.finish(116);\n\n                    case 120:\n                        return _context.finish(113);\n\n                    case 121:\n\n                        // sort these stats\n                        stats = [];\n                        _iteratorNormalCompletion3 = true;\n                        _didIteratorError3 = false;\n                        _iteratorError3 = undefined;\n                        _context.prev = 125;\n                        _iterator3 = members[Symbol.iterator]();\n\n                    case 127:\n                        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                            _context.next = 147;\n                            break;\n                        }\n\n                        _member2 = _step3.value;\n\n                        if (!(stats.length == 0)) {\n                            _context.next = 133;\n                            break;\n                        }\n\n                        // if this shit's empty, just push it\n                        stats.push(_member2);\n                        _context.next = 144;\n                        break;\n\n                    case 133:\n                        added = false;\n\n                        // else, look through the current groupTotal\n\n                        i = 0;\n\n                    case 135:\n                        if (!(i < stats.length)) {\n                            _context.next = 143;\n                            break;\n                        }\n\n                        if (!(stats[i].message_count <= _member2.message_count)) {\n                            _context.next = 140;\n                            break;\n                        }\n\n                        // splice this new usertotal into the group total\n                        stats.splice(i, 0, _member2);\n                        added = true;\n                        return _context.abrupt(\"break\", 143);\n\n                    case 140:\n                        i++;\n                        _context.next = 135;\n                        break;\n\n                    case 143:\n                        if (!added) {\n                            stats.push(_member2);\n                        }\n\n                    case 144:\n                        _iteratorNormalCompletion3 = true;\n                        _context.next = 127;\n                        break;\n\n                    case 147:\n                        _context.next = 153;\n                        break;\n\n                    case 149:\n                        _context.prev = 149;\n                        _context.t3 = _context[\"catch\"](125);\n                        _didIteratorError3 = true;\n                        _iteratorError3 = _context.t3;\n\n                    case 153:\n                        _context.prev = 153;\n                        _context.prev = 154;\n\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n\n                    case 156:\n                        _context.prev = 156;\n\n                        if (!_didIteratorError3) {\n                            _context.next = 159;\n                            break;\n                        }\n\n                        throw _iteratorError3;\n\n                    case 159:\n                        return _context.finish(156);\n\n                    case 160:\n                        return _context.finish(153);\n\n                    case 161:\n                        _iteratorNormalCompletion4 = true;\n                        _didIteratorError4 = false;\n                        _iteratorError4 = undefined;\n                        _context.prev = 164;\n\n\n                        for (_iterator4 = stats[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            stat = _step4.value;\n\n                            botMessage += stat.nickname + \": \" + stat.message_count + \" messages (\" + (100 * (stat.message_count / _messages.length)).toFixed(2) + \"%)\\n\";\n                        }\n\n                        _context.next = 172;\n                        break;\n\n                    case 168:\n                        _context.prev = 168;\n                        _context.t4 = _context[\"catch\"](164);\n                        _didIteratorError4 = true;\n                        _iteratorError4 = _context.t4;\n\n                    case 172:\n                        _context.prev = 172;\n                        _context.prev = 173;\n\n                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                            _iterator4.return();\n                        }\n\n                    case 175:\n                        _context.prev = 175;\n\n                        if (!_didIteratorError4) {\n                            _context.next = 178;\n                            break;\n                        }\n\n                        throw _iteratorError4;\n\n                    case 178:\n                        return _context.finish(175);\n\n                    case 179:\n                        return _context.finish(172);\n\n                    case 180:\n                        botCount = _messages.length - totalHumanMessages;\n\n                        botMessage += \"ArmBot: \" + botCount + \" messages (\" + (100 * (botCount / _messages.length)).toFixed(2) + \"%)\\n\";\n                        botMessage += \"\\nTotal Messages: \" + _messages.length;\n\n                        _context.next = 529;\n                        break;\n\n                    case 185:\n                        if (!text.includes(\"/hearts\")) {\n                            _context.next = 271;\n                            break;\n                        }\n\n                        // this whole thing needs checks to make sure the syntax is:\n                        // syntax:   /hearts number units\n                        // example:  /hearts 5 days\n\n                        // pop the command into an array\n                        _textArray2 = text.split(\" \");\n                        // if length is greater than 1 we have a number\n\n                        _hasNumber = _textArray2.length > 1;\n                        // if length is greater than 2 we have units\n\n                        _hasUnits = _textArray2.length > 2;\n\n                        // if we don't have a number, numHours = 0\n\n                        _numHours = _hasNumber ? _textArray2[1] : 0;\n                        // if we have units, use the units as a mulitplier\n\n                        // plural will be 1 if we are asking for more than 1 of a unit\n\n                        _plural = _numHours == 1 ? 0 : 1;\n\n                        // default unitsInText\n\n                        _unitsInText = _numHours + \" hour\";\n\n\n                        if (_hasUnits) {\n                            _units = _textArray2[2];\n\n\n                            if (_units.includes(\"hour\")) {\n                                // do nothing\n                            } else if (_units.includes(\"day\")) {\n                                // 24 hours in a day\n                                _unitsInText = _numHours + \" day\";\n                                _numHours *= 24;\n                            } else if (_units.includes(\"week\")) {\n                                // 7 days in a week\n                                _unitsInText = _numHours + \" week\";\n                                _numHours *= 24 * 7;\n                            } else if (_units.includes(\"month\")) {\n                                // 4 weeks in (most) months\n                                _unitsInText = _numHours + \" month\";\n                                _numHours *= 24 * 7 * 4;\n                            } else if (_units.includes(\"year\")) {\n                                // 365 days in a year\n                                _unitsInText = _numHours + \" year\";\n                                _numHours *= 24 * 365;\n                            }\n                        }\n                        if (_plural) {\n                            _unitsInText += \"s\";\n                        }\n\n                        if (_numHours == 0) {\n                            botMessage = \"Hearts Received All Time\\n\\n\";\n                            _numHours = new Date().getTime() / (1000 * 3600) - 1;\n                        } else {\n                            botMessage = \"Hearts Received In The Last: \" + _unitsInText + \"\\n\\n\";\n                        }\n\n                        _context.next = 197;\n                        return getMessages(_numHours * 3600);\n\n                    case 197:\n                        _messages2 = _context.sent;\n                        _context.next = 200;\n                        return helpers.callGroupDetails(ACCESS_TOKEN);\n\n                    case 200:\n                        _groupDetails = _context.sent;\n                        _members = _groupDetails.members;\n                        heartCounts = [];\n                        groupTotal = [];\n                        _iteratorNormalCompletion6 = true;\n                        _didIteratorError6 = false;\n                        _iteratorError6 = undefined;\n                        _context.prev = 207;\n                        _iterator6 = _members[Symbol.iterator]();\n\n                    case 209:\n                        if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {\n                            _context.next = 253;\n                            break;\n                        }\n\n                        _member3 = _step6.value;\n                        count = 0;\n                        _iteratorNormalCompletion7 = true;\n                        _didIteratorError7 = false;\n                        _iteratorError7 = undefined;\n                        _context.prev = 215;\n\n                        for (_iterator7 = _messages2[Symbol.iterator](); !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                            _message = _step7.value;\n\n                            if (_member3.user_id == _message.user_id) {\n                                count += _message.favorited_by.length;\n                            }\n                        }\n\n                        _context.next = 223;\n                        break;\n\n                    case 219:\n                        _context.prev = 219;\n                        _context.t5 = _context[\"catch\"](215);\n                        _didIteratorError7 = true;\n                        _iteratorError7 = _context.t5;\n\n                    case 223:\n                        _context.prev = 223;\n                        _context.prev = 224;\n\n                        if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                            _iterator7.return();\n                        }\n\n                    case 226:\n                        _context.prev = 226;\n\n                        if (!_didIteratorError7) {\n                            _context.next = 229;\n                            break;\n                        }\n\n                        throw _iteratorError7;\n\n                    case 229:\n                        return _context.finish(226);\n\n                    case 230:\n                        return _context.finish(223);\n\n                    case 231:\n                        heartCount = _member3.nickname + \": \" + count;\n\n                        heartCounts.push(heartCount);\n\n                        // lets be smart about storing this so we can sort it     \n                        userTotal = {\n                            \"member\": _member3.nickname,\n                            \"count\": count\n                        };\n\n\n                        console.log(userTotal);\n\n                        // add data to groupTotal sorted by total\n\n                        if (!(groupTotal.length == 0)) {\n                            _context.next = 239;\n                            break;\n                        }\n\n                        // if this shit's empty, just push it\n                        groupTotal.push(userTotal);\n                        _context.next = 250;\n                        break;\n\n                    case 239:\n                        _added = false;\n\n                        // else, look through the current groupTotal\n\n                        _i = 0;\n\n                    case 241:\n                        if (!(_i < groupTotal.length)) {\n                            _context.next = 249;\n                            break;\n                        }\n\n                        if (!(groupTotal[_i].count <= userTotal.count)) {\n                            _context.next = 246;\n                            break;\n                        }\n\n                        // splice this new usertotal into the group total\n                        groupTotal.splice(_i, 0, userTotal);\n                        _added = true;\n                        return _context.abrupt(\"break\", 249);\n\n                    case 246:\n                        _i++;\n                        _context.next = 241;\n                        break;\n\n                    case 249:\n                        if (!_added) {\n                            groupTotal.push(userTotal);\n                        }\n\n                    case 250:\n                        _iteratorNormalCompletion6 = true;\n                        _context.next = 209;\n                        break;\n\n                    case 253:\n                        _context.next = 259;\n                        break;\n\n                    case 255:\n                        _context.prev = 255;\n                        _context.t6 = _context[\"catch\"](207);\n                        _didIteratorError6 = true;\n                        _iteratorError6 = _context.t6;\n\n                    case 259:\n                        _context.prev = 259;\n                        _context.prev = 260;\n\n                        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                            _iterator6.return();\n                        }\n\n                    case 262:\n                        _context.prev = 262;\n\n                        if (!_didIteratorError6) {\n                            _context.next = 265;\n                            break;\n                        }\n\n                        throw _iteratorError6;\n\n                    case 265:\n                        return _context.finish(262);\n\n                    case 266:\n                        return _context.finish(259);\n\n                    case 267:\n\n                        groupTotal.forEach(function (item, index, array) {\n                            botMessage += index + 1 + \". \" + item.member + \" : \" + item.count + \"\\n\";\n                        });\n\n                        consoleMessage = \"Bot sent a heart count reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 271:\n                        if (!text.includes(\"/lastseen\")) {\n                            _context.next = 310;\n                            break;\n                        }\n\n                        user_id = req.body.attachments[0].user_ids[0];\n                        last_seen = 0;\n                        _context.next = 276;\n                        return getAllMessages();\n\n                    case 276:\n                        _messages3 = _context.sent;\n\n                        console.log(user_id);\n                        _iteratorNormalCompletion8 = true;\n                        _didIteratorError8 = false;\n                        _iteratorError8 = undefined;\n                        _context.prev = 281;\n                        _iterator8 = _messages3[Symbol.iterator]();\n\n                    case 283:\n                        if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {\n                            _context.next = 291;\n                            break;\n                        }\n\n                        _message2 = _step8.value;\n\n                        if (!(user_id === _message2.user_id)) {\n                            _context.next = 288;\n                            break;\n                        }\n\n                        last_seen = _message2.created_at;\n                        return _context.abrupt(\"break\", 291);\n\n                    case 288:\n                        _iteratorNormalCompletion8 = true;\n                        _context.next = 283;\n                        break;\n\n                    case 291:\n                        _context.next = 297;\n                        break;\n\n                    case 293:\n                        _context.prev = 293;\n                        _context.t7 = _context[\"catch\"](281);\n                        _didIteratorError8 = true;\n                        _iteratorError8 = _context.t7;\n\n                    case 297:\n                        _context.prev = 297;\n                        _context.prev = 298;\n\n                        if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                            _iterator8.return();\n                        }\n\n                    case 300:\n                        _context.prev = 300;\n\n                        if (!_didIteratorError8) {\n                            _context.next = 303;\n                            break;\n                        }\n\n                        throw _iteratorError8;\n\n                    case 303:\n                        return _context.finish(300);\n\n                    case 304:\n                        return _context.finish(297);\n\n                    case 305:\n                        if (last_seen == 0) {\n                            botMessage = user_id + \" hasn't been seen yet.\";\n                        } else {\n                            dateF = new Date(last_seen * 1000);\n\n                            botMessage = dateF.toUTCString();\n                        }\n\n                        console.log(last_seen);\n                        consoleMessage = \"Bot sent a last seen timestamp reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 310:\n                        if (!text.includes(\"/personality\")) {\n                            _context.next = 369;\n                            break;\n                        }\n\n                        console.log(text);\n\n                        sinceHours = text.match(/\\d+$/);\n\n                        console.log(\"sinceHours: \" + sinceHours);\n                        if (!sinceHours) {\n                            sinceHours = 0;\n                        }\n\n                        _context.next = 317;\n                        return getAllMessages();\n\n                    case 317:\n                        _messages4 = _context.sent;\n                        _user_id = req.body.attachments[0].user_ids[0];\n                        dateNow = new Date();\n                        contentItems = [];\n                        _i2 = 0;\n                        username = \"\";\n                        _iteratorNormalCompletion9 = true;\n                        _didIteratorError9 = false;\n                        _iteratorError9 = undefined;\n                        _context.prev = 326;\n                        _iterator9 = _messages4[Symbol.iterator]();\n\n                    case 328:\n                        if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {\n                            _context.next = 345;\n                            break;\n                        }\n\n                        _message3 = _step9.value;\n\n                        if (!(_user_id === _message3.user_id)) {\n                            _context.next = 342;\n                            break;\n                        }\n\n                        username = _message3.name;\n                        dateMsg = new Date(_message3.created_at * 1000);\n                        hourDiff = Math.abs(dateNow - dateMsg) / 36e5;\n\n                        if (!(sinceHours !== 0 && sinceHours < hourDiff)) {\n                            _context.next = 337;\n                            break;\n                        }\n\n                        console.log(\"Loop breaks at \" + _i2 + \" times.\");\n                        return _context.abrupt(\"break\", 345);\n\n                    case 337:\n                        if (_message3.text) {\n                            _context.next = 340;\n                            break;\n                        }\n\n                        console.log(\"Empty text.\");\n                        return _context.abrupt(\"continue\", 342);\n\n                    case 340:\n\n                        contentItems.push({\n                            \"content\": _message3.text,\n                            \"contenttype\": \"text/plain\",\n                            \"created\": _message3.created_at,\n                            \"id\": _message3.id,\n                            \"language\": \"en\"\n                        });\n                        _i2++;\n\n                    case 342:\n                        _iteratorNormalCompletion9 = true;\n                        _context.next = 328;\n                        break;\n\n                    case 345:\n                        _context.next = 351;\n                        break;\n\n                    case 347:\n                        _context.prev = 347;\n                        _context.t8 = _context[\"catch\"](326);\n                        _didIteratorError9 = true;\n                        _iteratorError9 = _context.t8;\n\n                    case 351:\n                        _context.prev = 351;\n                        _context.prev = 352;\n\n                        if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                            _iterator9.return();\n                        }\n\n                    case 354:\n                        _context.prev = 354;\n\n                        if (!_didIteratorError9) {\n                            _context.next = 357;\n                            break;\n                        }\n\n                        throw _iteratorError9;\n\n                    case 357:\n                        return _context.finish(354);\n\n                    case 358:\n                        return _context.finish(351);\n\n                    case 359:\n                        _context.next = 361;\n                        return PersonalityInsights.getPersonalityInsights(contentItems);\n\n                    case 361:\n                        personalityInsights = _context.sent;\n\n                        console.log(\"Personality response length: \" + personalityInsights.personality.length);\n                        botMessage = username + \" has been \";\n                        if (sinceHours > 0) {\n                            botMessage += personalityInsights.personality[0].name.toLowerCase() + \" over the past \" + sinceHours.toString() + \" hours\";\n                        } else {\n                            _id = Math.round(Math.random() * (personalityInsights.personality.length - 1));\n\n                            botMessage += personalityInsights.personality[_id].name.toLowerCase();\n                        }\n\n                        botMessage += \".\";\n                        consoleMessage = \"Bot sent a Personality Insights reply.\";\n                        _context.next = 529;\n                        break;\n\n                    case 369:\n                        if (!text.includes(\"/stats\")) {\n                            _context.next = 529;\n                            break;\n                        }\n\n                        // this whole thing needs checks to make sure the syntax is:\n                        // syntax:   /stats number units\n                        // example:  /stats 5 days\n\n                        // pop the command into an array\n                        _textArray3 = text.split(\" \");\n                        // if length is greater than 1 we have a number\n\n                        _hasNumber2 = _textArray3.length > 1;\n                        // if length is greater than 2 we have units\n\n                        _hasUnits2 = _textArray3.length > 2;\n\n                        // if we don't have a number, numHours = 0\n\n                        _numHours2 = _hasNumber2 ? _textArray3[1] : 0;\n                        // if we have units, use the units as a mulitplier\n\n                        // plural will be 1 if we are asking for more than 1 of a unit\n\n                        _plural2 = _numHours2 == 1 ? 0 : 1;\n\n                        // default unitsInText\n\n                        _unitsInText2 = _numHours2 + \" hour\";\n\n\n                        if (_hasUnits2) {\n                            _units2 = _textArray3[2];\n\n\n                            if (_units2.includes(\"hour\")) {\n                                // do nothing\n                            } else if (_units2.includes(\"day\")) {\n                                // 24 hours in a day\n                                _unitsInText2 = _numHours2 + \" day\";\n                                _numHours2 *= 24;\n                            } else if (_units2.includes(\"week\")) {\n                                // 7 days in a week\n                                _unitsInText2 = _numHours2 + \" week\";\n                                _numHours2 *= 24 * 7;\n                            } else if (_units2.includes(\"month\")) {\n                                // 4 weeks in (most) months\n                                _unitsInText2 = _numHours2 + \" month\";\n                                _numHours2 *= 24 * 7 * 4;\n                            } else if (_units2.includes(\"year\")) {\n                                // 365 days in a year\n                                _unitsInText2 = _numHours2 + \" year\";\n                                _numHours2 *= 24 * 365;\n                            }\n                        }\n                        if (_plural2) {\n                            _unitsInText2 += \"s\";\n                        }\n\n                        if (_numHours2 == 0) {\n                            botMessage = \"Stats All Time\\n\\n\";\n                            _numHours2 = new Date().getTime() / (1000 * 3600) - 1;\n                        } else {\n                            botMessage = \"Stats In The Last: \" + _unitsInText2 + \"\\n\\n\";\n                        }\n\n                        _context.next = 381;\n                        return getMessages(_numHours2 * 3600);\n\n                    case 381:\n                        _messages5 = _context.sent;\n                        _context.next = 384;\n                        return helpers.callGroupDetails(ACCESS_TOKEN);\n\n                    case 384:\n                        _groupDetails2 = _context.sent;\n                        _members2 = _groupDetails2.members;\n\n\n                        console.log(_members2);\n\n                        _stats = {};\n                        _iteratorNormalCompletion10 = true;\n                        _didIteratorError10 = false;\n                        _iteratorError10 = undefined;\n                        _context.prev = 391;\n                        _iterator10 = _members2[Symbol.iterator]();\n\n                    case 393:\n                        if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {\n                            _context.next = 423;\n                            break;\n                        }\n\n                        memberA = _step10.value;\n\n                        _stats[memberA.user_id] = {};\n                        _stats[memberA.user_id].nickname = memberA.nickname;\n                        _stats[memberA.user_id].user_id = memberA.user_id;\n                        _stats[memberA.user_id].hearts_from = {};\n                        _stats[memberA.user_id].hearts_total = 0;\n                        _stats[memberA.user_id].messages_total = 0;\n                        _iteratorNormalCompletion13 = true;\n                        _didIteratorError13 = false;\n                        _iteratorError13 = undefined;\n                        _context.prev = 404;\n                        for (_iterator13 = _members2[Symbol.iterator](); !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                            memberB = _step13.value;\n\n                            _stats[memberA.user_id].hearts_from[memberB.user_id] = 0;\n                        }\n                        _context.next = 412;\n                        break;\n\n                    case 408:\n                        _context.prev = 408;\n                        _context.t9 = _context[\"catch\"](404);\n                        _didIteratorError13 = true;\n                        _iteratorError13 = _context.t9;\n\n                    case 412:\n                        _context.prev = 412;\n                        _context.prev = 413;\n\n                        if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                            _iterator13.return();\n                        }\n\n                    case 415:\n                        _context.prev = 415;\n\n                        if (!_didIteratorError13) {\n                            _context.next = 418;\n                            break;\n                        }\n\n                        throw _iteratorError13;\n\n                    case 418:\n                        return _context.finish(415);\n\n                    case 419:\n                        return _context.finish(412);\n\n                    case 420:\n                        _iteratorNormalCompletion10 = true;\n                        _context.next = 393;\n                        break;\n\n                    case 423:\n                        _context.next = 429;\n                        break;\n\n                    case 425:\n                        _context.prev = 425;\n                        _context.t10 = _context[\"catch\"](391);\n                        _didIteratorError10 = true;\n                        _iteratorError10 = _context.t10;\n\n                    case 429:\n                        _context.prev = 429;\n                        _context.prev = 430;\n\n                        if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                            _iterator10.return();\n                        }\n\n                    case 432:\n                        _context.prev = 432;\n\n                        if (!_didIteratorError10) {\n                            _context.next = 435;\n                            break;\n                        }\n\n                        throw _iteratorError10;\n\n                    case 435:\n                        return _context.finish(432);\n\n                    case 436:\n                        return _context.finish(429);\n\n                    case 437:\n                        _iteratorNormalCompletion11 = true;\n                        _didIteratorError11 = false;\n                        _iteratorError11 = undefined;\n                        _context.prev = 440;\n                        _iterator11 = _messages5[Symbol.iterator]();\n\n                    case 442:\n                        if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {\n                            _context.next = 468;\n                            break;\n                        }\n\n                        _message4 = _step11.value;\n\n                        if (!(_message4.sender_type == 'user')) {\n                            _context.next = 465;\n                            break;\n                        }\n\n                        _stats[_message4.user_id].messages_total++;\n                        _iteratorNormalCompletion14 = true;\n                        _didIteratorError14 = false;\n                        _iteratorError14 = undefined;\n                        _context.prev = 449;\n                        for (_iterator14 = _message4.favorited_by[Symbol.iterator](); !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                            heart = _step14.value;\n\n                            _stats[_message4.user_id].hearts_from[heart]++;\n                            _stats[_message4.user_id].hearts_total++;\n                        }\n                        _context.next = 457;\n                        break;\n\n                    case 453:\n                        _context.prev = 453;\n                        _context.t11 = _context[\"catch\"](449);\n                        _didIteratorError14 = true;\n                        _iteratorError14 = _context.t11;\n\n                    case 457:\n                        _context.prev = 457;\n                        _context.prev = 458;\n\n                        if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                            _iterator14.return();\n                        }\n\n                    case 460:\n                        _context.prev = 460;\n\n                        if (!_didIteratorError14) {\n                            _context.next = 463;\n                            break;\n                        }\n\n                        throw _iteratorError14;\n\n                    case 463:\n                        return _context.finish(460);\n\n                    case 464:\n                        return _context.finish(457);\n\n                    case 465:\n                        _iteratorNormalCompletion11 = true;\n                        _context.next = 442;\n                        break;\n\n                    case 468:\n                        _context.next = 474;\n                        break;\n\n                    case 470:\n                        _context.prev = 470;\n                        _context.t12 = _context[\"catch\"](440);\n                        _didIteratorError11 = true;\n                        _iteratorError11 = _context.t12;\n\n                    case 474:\n                        _context.prev = 474;\n                        _context.prev = 475;\n\n                        if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                            _iterator11.return();\n                        }\n\n                    case 477:\n                        _context.prev = 477;\n\n                        if (!_didIteratorError11) {\n                            _context.next = 480;\n                            break;\n                        }\n\n                        throw _iteratorError11;\n\n                    case 480:\n                        return _context.finish(477);\n\n                    case 481:\n                        return _context.finish(474);\n\n                    case 482:\n                        _iteratorNormalCompletion12 = true;\n                        _didIteratorError12 = false;\n                        _iteratorError12 = undefined;\n                        _context.prev = 485;\n                        _iterator12 = _members2[Symbol.iterator]();\n\n                    case 487:\n                        if (_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done) {\n                            _context.next = 515;\n                            break;\n                        }\n\n                        _memberA = _step12.value;\n                        _stat = _stats[_memberA.user_id];\n\n                        botMessage += \"\\\"\" + _memberA.nickname + \"\\\" received: \" + _stats[_memberA.user_id].hearts_total + \" hearts over \" + _stats[_memberA.user_id].messages_total + \" message(s) ... \";\n                        if (_stats[_memberA.user_id].messages_total != 0) {\n                            botMessage += (_stats[_memberA.user_id].hearts_total / _stats[_memberA.user_id].messages_total).toFixed(2) + \" HPM\\n\";\n                        } else {\n                            botMessage += \"\\n\";\n                        }\n                        _iteratorNormalCompletion15 = true;\n                        _didIteratorError15 = false;\n                        _iteratorError15 = undefined;\n                        _context.prev = 495;\n                        for (_iterator15 = _members2[Symbol.iterator](); !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                            _memberB = _step15.value;\n\n                            botMessage += \"-\" + _memberB.nickname + \": \" + _stats[_memberA.user_id].hearts_from[_memberB.user_id] + \"\\n\";\n                        }\n                        _context.next = 503;\n                        break;\n\n                    case 499:\n                        _context.prev = 499;\n                        _context.t13 = _context[\"catch\"](495);\n                        _didIteratorError15 = true;\n                        _iteratorError15 = _context.t13;\n\n                    case 503:\n                        _context.prev = 503;\n                        _context.prev = 504;\n\n                        if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                            _iterator15.return();\n                        }\n\n                    case 506:\n                        _context.prev = 506;\n\n                        if (!_didIteratorError15) {\n                            _context.next = 509;\n                            break;\n                        }\n\n                        throw _iteratorError15;\n\n                    case 509:\n                        return _context.finish(506);\n\n                    case 510:\n                        return _context.finish(503);\n\n                    case 511:\n                        botMessage += \"\\n\";\n\n                    case 512:\n                        _iteratorNormalCompletion12 = true;\n                        _context.next = 487;\n                        break;\n\n                    case 515:\n                        _context.next = 521;\n                        break;\n\n                    case 517:\n                        _context.prev = 517;\n                        _context.t14 = _context[\"catch\"](485);\n                        _didIteratorError12 = true;\n                        _iteratorError12 = _context.t14;\n\n                    case 521:\n                        _context.prev = 521;\n                        _context.prev = 522;\n\n                        if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                            _iterator12.return();\n                        }\n\n                    case 524:\n                        _context.prev = 524;\n\n                        if (!_didIteratorError12) {\n                            _context.next = 527;\n                            break;\n                        }\n\n                        throw _iteratorError12;\n\n                    case 527:\n                        return _context.finish(524);\n\n                    case 528:\n                        return _context.finish(521);\n\n                    case 529:\n\n                        if (botMessage) {\n                            opts = {\n                                picture_url: \"\"\n                            };\n\n                            API.Bots.post(ACCESS_TOKEN, BOT_ID, botMessage, opts, function (err, ret) {\n                                if (!err) {\n                                    console.log(botMessage);\n                                    console.log(consoleMessage);\n                                }\n                            });\n                        }\n\n                    case 530:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }\n        }, _callee, this, [[61, 65, 69, 77], [70,, 72, 76], [81, 109, 113, 121], [88, 92, 96, 104], [97,, 99, 103], [114,, 116, 120], [125, 149, 153, 161], [154,, 156, 160], [164, 168, 172, 180], [173,, 175, 179], [207, 255, 259, 267], [215, 219, 223, 231], [224,, 226, 230], [260,, 262, 266], [281, 293, 297, 305], [298,, 300, 304], [326, 347, 351, 359], [352,, 354, 358], [391, 425, 429, 437], [404, 408, 412, 420], [413,, 415, 419], [430,, 432, 436], [440, 470, 474, 482], [449, 453, 457, 465], [458,, 460, 464], [475,, 477, 481], [485, 517, 521, 529], [495, 499, 503, 511], [504,, 506, 510], [522,, 524, 528]]);\n    }));\n\n    return function postBotMessage(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\nvar getAllMessages = exports.getAllMessages = function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {\n        var messages, limit, messageTemp, messageCount, beforeId, i;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n                switch (_context2.prev = _context2.next) {\n                    case 0:\n                        messages = [];\n                        limit = 100;\n\n                        console.log(\"Get messages.\");\n                        _context2.next = 5;\n                        return helpers.callGetMessages({\n                            group_id: GROUP_ID,\n                            token: ACCESS_TOKEN,\n                            before_id: 0\n                        });\n\n                    case 5:\n                        messageTemp = _context2.sent;\n                        messageCount = messageTemp.count;\n\n                        messages = messageTemp.messages;\n\n                        console.log(messageTemp.count);\n                        console.log(messageTemp.messages.length);\n\n                        if (!(messageCount > limit)) {\n                            _context2.next = 25;\n                            break;\n                        }\n\n                        beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n                        i = limit;\n\n                    case 13:\n                        if (!(i < messageCount)) {\n                            _context2.next = 25;\n                            break;\n                        }\n\n                        console.log(\"Before ID: \" + beforeId + \" Count: \" + i);\n\n                        if (!(i >= limit)) {\n                            _context2.next = 22;\n                            break;\n                        }\n\n                        _context2.next = 18;\n                        return helpers.callGetMessages({\n                            group_id: GROUP_ID,\n                            token: ACCESS_TOKEN,\n                            before_id: beforeId\n                        });\n\n                    case 18:\n                        messageTemp = _context2.sent;\n\n                        console.log(\"Next message count: \" + messageTemp.count + \" -- \" + messageTemp.messages.length);\n                        beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n                        Array.prototype.push.apply(messages, messageTemp.messages);\n\n                    case 22:\n                        i += limit;\n                        _context2.next = 13;\n                        break;\n\n                    case 25:\n                        console.log(\"Get messages done.\");\n                        console.log(\"Total messages: \" + messages.length);\n                        return _context2.abrupt(\"return\", messages);\n\n                    case 28:\n                    case \"end\":\n                        return _context2.stop();\n                }\n            }\n        }, _callee2, this);\n    }));\n\n    return function getAllMessages() {\n        return _ref2.apply(this, arguments);\n    };\n}();\n\nvar countWords = exports.countWords = function countWords(messages) {\n    var totalWords = 0;\n    var _iteratorNormalCompletion16 = true;\n    var _didIteratorError16 = false;\n    var _iteratorError16 = undefined;\n\n    try {\n        for (var _iterator16 = messages[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var message = _step16.value;\n\n            if (\"bot\" === message.sender_type) {\n                // Ignore bot messages\n                continue;\n            }\n\n            var text = message.text;\n            if (isEmpty(text)) {\n                continue;\n            }\n            totalWords += text.trim().split(/\\s+/).length;\n        }\n    } catch (err) {\n        _didIteratorError16 = true;\n        _iteratorError16 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                _iterator16.return();\n            }\n        } finally {\n            if (_didIteratorError16) {\n                throw _iteratorError16;\n            }\n        }\n    }\n\n    return totalWords;\n};\n\nvar groupMeWordCount = exports.groupMeWordCount = function groupMeWordCount(messages, word) {\n    var wordsCount = 0;\n    var _iteratorNormalCompletion17 = true;\n    var _didIteratorError17 = false;\n    var _iteratorError17 = undefined;\n\n    try {\n        for (var _iterator17 = messages[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n            var message = _step17.value;\n\n\n            if (\"bot\" === message.sender_type) {\n                // Ignore bot messages\n                continue;\n            }\n\n            var text = message.text;\n            if (isEmpty(text)) {\n                continue;\n            }\n            if (text.includes(word)) {\n                wordsCount++;\n            }\n        }\n    } catch (err) {\n        _didIteratorError17 = true;\n        _iteratorError17 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                _iterator17.return();\n            }\n        } finally {\n            if (_didIteratorError17) {\n                throw _iteratorError17;\n            }\n        }\n    }\n\n    return wordsCount;\n};\n\nvar isEmpty = exports.isEmpty = function isEmpty(str) {\n    return !str || 0 === str.length;\n};\n\nvar getMessages = exports.getMessages = function () {\n    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(seconds) {\n        var messages, seekTime, searchComplete, beforeId, limit, totalMessageCount, data, i;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n                switch (_context3.prev = _context3.next) {\n                    case 0:\n                        console.log(\"Getting \" + seconds + \" seconds worth of messages.\");\n\n                        // array to hold the messages we return\n                        messages = [];\n                        // getTime returns milli seconds since epoch, divide by 1k to conver to seconds and subtract how many seconds we care about\n\n                        seekTime = new Date().getTime() / 1000 - seconds;\n                        searchComplete = false;\n                        beforeId = 0;\n                        limit = 100;\n                        totalMessageCount = 0;\n\n                    case 7:\n                        _context3.next = 9;\n                        return helpers.getMessageWrapper({\n                            group_id: GROUP_ID,\n                            token: ACCESS_TOKEN,\n                            before_id: beforeId,\n                            limit: limit\n                        });\n\n                    case 9:\n                        data = _context3.sent;\n\n\n                        // set our request limit to the number of messages remaining\n                        limit = data.count - messages.length;\n                        totalMessageCount = data.count;\n\n                        // if limit is greater than 100, default to 100\n                        limit = limit > 100 ? 100 : limit;\n\n                        // if limit is less than 100, set to 0.. who knows why.\n                        limit = limit < 100 ? 0 : limit;\n\n                        // loop through the chunk\n                        i = 0;\n\n                    case 15:\n                        if (!(i < data.messages.length)) {\n                            _context3.next = 25;\n                            break;\n                        }\n\n                        if (!(data.messages[i].created_at > seekTime)) {\n                            _context3.next = 20;\n                            break;\n                        }\n\n                        // add it to our messages array\n                        messages.push(data.messages[i]);\n                        _context3.next = 22;\n                        break;\n\n                    case 20:\n                        // search is complete! set some flag and gtfo\n                        searchComplete = true;\n                        return _context3.abrupt(\"break\", 25);\n\n                    case 22:\n                        i++;\n                        _context3.next = 15;\n                        break;\n\n                    case 25:\n\n                        // reassign the before id for the next chunk request\n                        beforeId = data.messages[data.messages.length - 1].id;\n\n                    case 26:\n                        if (searchComplete == false && limit > 0) {\n                            _context3.next = 7;\n                            break;\n                        }\n\n                    case 27:\n\n                        console.log(\"Received \" + messages.length + \" of \" + totalMessageCount + \" messages.\");\n                        return _context3.abrupt(\"return\", messages);\n\n                    case 29:\n                    case \"end\":\n                        return _context3.stop();\n                }\n            }\n        }, _callee3, this);\n    }));\n\n    return function getMessages(_x2) {\n        return _ref3.apply(this, arguments);\n    };\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "GraphMeUtils.js"
      ],
      "names": [
        "helpers",
        "PersonalityInsights",
        "ACCESS_TOKEN",
        "process",
        "env",
        "BOT_ID",
        "GROUP_ID",
        "API",
        "require",
        "Stateless",
        "postBotMessage",
        "req",
        "console",
        "log",
        "body",
        "consoleMessage",
        "botMessage",
        "sender_type",
        "text",
        "isEmpty",
        "trim",
        "toLowerCase",
        "includes",
        "randomText",
        "id",
        "Math",
        "round",
        "random",
        "length",
        "textArray",
        "split",
        "getAllMessages",
        "messages",
        "word",
        "groupMeWordCount",
        "wordCount",
        "toString",
        "countWords",
        "totalWords",
        "hasNumber",
        "hasUnits",
        "numHours",
        "plural",
        "unitsInText",
        "units",
        "Date",
        "getTime",
        "getMessages",
        "callGroupDetails",
        "groupDetails",
        "members",
        "member",
        "message_count",
        "totalHumanMessages",
        "message",
        "user_id",
        "stats",
        "push",
        "added",
        "i",
        "splice",
        "stat",
        "nickname",
        "toFixed",
        "botCount",
        "heartCounts",
        "groupTotal",
        "count",
        "favorited_by",
        "heartCount",
        "userTotal",
        "forEach",
        "item",
        "index",
        "array",
        "attachments",
        "user_ids",
        "last_seen",
        "created_at",
        "dateF",
        "toUTCString",
        "sinceHours",
        "match",
        "dateNow",
        "contentItems",
        "username",
        "name",
        "dateMsg",
        "hourDiff",
        "abs",
        "getPersonalityInsights",
        "personalityInsights",
        "personality",
        "memberA",
        "hearts_from",
        "hearts_total",
        "messages_total",
        "memberB",
        "heart",
        "opts",
        "picture_url",
        "Bots",
        "post",
        "err",
        "ret",
        "limit",
        "callGetMessages",
        "group_id",
        "token",
        "before_id",
        "messageTemp",
        "messageCount",
        "beforeId",
        "Array",
        "prototype",
        "apply",
        "wordsCount",
        "str",
        "seconds",
        "seekTime",
        "searchComplete",
        "totalMessageCount",
        "getMessageWrapper",
        "data"
      ],
      "mappings": "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",
      "file": "GraphMeUtils.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "const ACCESS_TOKEN = process.env.ACCESS_TOKEN;\nconst BOT_ID = process.env.BOT_ID;\nconst GROUP_ID = process.env.GROUP_ID;\nconst API = require('groupme').Stateless;\n\nimport * as helpers from \"./helpers\";\nimport * as PersonalityInsights from \"./PersonalityInsights\";\n\n// when we receive a message\nexport const postBotMessage = async function(req) {\n    console.log(\"Request Payload\");\n    console.log(req.body);\n    let consoleMessage = \"\";\n    let botMessage = \"\";\n    let sender_type = req.body.sender_type;\n    let text = isEmpty(req.body.text) ? req.body.text : req.body.text.trim();\n\n    // if from a bot, ignore it\n    if (sender_type === \"bot\") {\n        console.log(\"No action..\");\n\n        // else if it's from a user\n    } else if (sender_type === \"user\") {\n        // convert all text to lowercase for easier parsing\n        text = text.toLowerCase();\n\n        if (['hi', 'hello'].includes(text)) {\n            // library of responses to the above 'if'\n            let randomText = [\n                'Hi, I am the ArmBot',\n                'Hello you bitch, you!',\n                'Seh-hent', 'Oooooop!',\n                'My shoes are ruined!',\n                'I was caught in a starm',\n                'Hello, Rouis.',\n                'We are all Blue Henns!',\n                'Smells like my asshole bro..',\n                'Uhhghh!! Can I get my face backkk?!'\n            ];\n            // pick a random index and spit it back\n            let id = Math.round(Math.random() * (randomText.length - 1));\n            botMessage = randomText[id];\n            consoleMessage = \"Bot sent hi reply.\";\n\n        } else if (text.includes(\"/wordcount\")) {\n            let textArray = text.split(\" \");\n            let messages = await getAllMessages();\n\n            console.log(\"Command length: \" + textArray.length);\n            if (textArray.length > 1) {\n                let word = textArray[1];\n                console.log(\"Count word instances: \" + word);\n                let wordCount = await groupMeWordCount(messages, word);\n                botMessage = \"\\\"\" + word + \"\\\" was said \" + wordCount.toString() + \" times\";\n            } else {\n                let totalWords = await countWords(messages);\n                botMessage = \"Total words of all time: \" + totalWords;\n            }\n            consoleMessage = \"Bot sent a word count reply.\";\n\n        } else if (text.includes(\"/messages\")) {\n            // this whole thing needs checks to make sure the syntax is:\n            // syntax:   /hearts number units\n            // example:  /hearts 5 days\n\n            // pop the command into an array\n            let textArray = text.split(\" \");\n            // if length is greater than 1 we have a number\n            let hasNumber = textArray.length > 1;\n            // if length is greater than 2 we have units\n            let hasUnits = textArray.length > 2;\n\n            // if we don't have a number, numHours = 0\n            let numHours = hasNumber ? textArray[1] : 0;\n            // if we have units, use the units as a mulitplier\n\n            // plural will be 1 if we are asking for more than 1 of a unit\n            let plural = numHours == 1 ? 0 : 1;\n\n            // default unitsInText\n            let unitsInText =  numHours + \" hour\";\n\n            if (hasUnits) {\n                let units = textArray[2];\n\n                if (units.includes(\"hour\")) {\n                    // do nothing\n                }\n                else if (units.includes(\"day\")) {\n                    // 24 hours in a day\n                    unitsInText = numHours + \" day\";\n                    numHours *= 24;\n                }\n                else if  (units.includes(\"week\")) {\n                    // 7 days in a week\n                    unitsInText = numHours + \" week\";\n                    numHours *= 24 * 7;\n                }\n                else if  (units.includes(\"month\")) {\n                    // 4 weeks in (most) months\n                    unitsInText = numHours + \" month\";\n                    numHours *= 24 * 7 * 4;\n                }\n                else if  (units.includes(\"year\")) {\n                    // 365 days in a year\n                    unitsInText = numHours + \" year\";\n                    numHours *= 24 * 365;\n                }\n\n            }\n            if (plural) {\n                unitsInText += \"s\";\n            }\n\n            // if no time entered, modify to ask for ALL TIME\n            if( numHours === 0 ){\n                numHours = new Date().getTime()/(1000*3600)-1;\n                botMessage = \"Messages Sent All Time\\n\\n\";\n            } else {\n                botMessage = \"Messages Sent In The Last: \" + unitsInText + \"\\n\\n\";\n            }\n          \n            // request the messages from N seconds ago till now\n            let messages = await getMessages( numHours * 3600 );\n            let groupDetails = await helpers.callGroupDetails(ACCESS_TOKEN);\n            let members = groupDetails.members;\n          \n            // create a 'message count' field for each member\n            for(let member of members){\n              member.message_count = 0;\n            }\n\n            // loop through all the messages and increment the users messages count\n            let totalHumanMessages = 0;\n            for (let message of messages) {\n              for( let member of members ){\n                if(member.user_id == message.user_id){\n                  totalHumanMessages++;\n                  member.message_count++;\n                }\n              }            \n            }\n\n          // sort these stats\n            let stats = []\n            for( let member of members){\n              \n                if( stats.length == 0 ){\n                  // if this shit's empty, just push it\n                  stats.push(member);\n                }else{\n                  let added = false;\n                  \n                  // else, look through the current groupTotal\n                  for(let i =0; i< stats.length; i++){\n\n                    // if the userTotal at this index is less than the one we are trying to add\n                    if( stats[i].message_count <= member.message_count ){\n                      // splice this new usertotal into the group total\n                      stats.splice(i, 0, member );\n                      added = true;\n                      break;\n                    }\n                  }\n                  if(!added){\n                    stats.push(member);\n                  }\n                }\n              \n            }\n         \n            for(let stat of stats ){\n              botMessage += stat.nickname + \": \" + stat.message_count + \" messages (\" + (100*(stat.message_count/messages.length)).toFixed(2)+\"%)\\n\"\n            }\n          \n            let botCount = messages.length - totalHumanMessages;\n            botMessage += \"ArmBot: \" + botCount + \" messages (\" + (100*(botCount/messages.length)).toFixed(2)+ \"%)\\n\";\n            botMessage += \"\\nTotal Messages: \" + messages.length;\n                    \n        } else if (text.includes(\"/hearts\")) {\n            // this whole thing needs checks to make sure the syntax is:\n            // syntax:   /hearts number units\n            // example:  /hearts 5 days\n\n            // pop the command into an array\n            let textArray = text.split(\" \");\n            // if length is greater than 1 we have a number\n            let hasNumber = textArray.length > 1;\n            // if length is greater than 2 we have units\n            let hasUnits = textArray.length > 2;\n\n            // if we don't have a number, numHours = 0\n            let numHours = hasNumber ? textArray[1] : 0;\n            // if we have units, use the units as a mulitplier\n\n            // plural will be 1 if we are asking for more than 1 of a unit\n            let plural = numHours == 1 ? 0 : 1;\n\n            // default unitsInText\n            let unitsInText =  numHours + \" hour\";\n\n            if (hasUnits) {\n                let units = textArray[2];\n\n                if (units.includes(\"hour\")) {\n                    // do nothing\n                }\n                else if (units.includes(\"day\")) {\n                    // 24 hours in a day\n                    unitsInText = numHours + \" day\";\n                    numHours *= 24;\n                }\n                else if  (units.includes(\"week\")) {\n                    // 7 days in a week\n                    unitsInText = numHours + \" week\";\n                    numHours *= 24 * 7;\n                }\n                else if  (units.includes(\"month\")) {\n                    // 4 weeks in (most) months\n                    unitsInText = numHours + \" month\";\n                    numHours *= 24 * 7 * 4\n                }\n                else if  (units.includes(\"year\")) {\n                    // 365 days in a year\n                    unitsInText = numHours + \" year\";\n                    numHours *= 24 * 365;\n                }\n\n            }\n            if (plural) {\n                unitsInText += \"s\";\n            }\n            \n            if (numHours == 0) {\n                botMessage = \"Hearts Received All Time\\n\\n\";\n                numHours = new Date().getTime()/(1000*3600)-1;\n            } else {\n                botMessage = \"Hearts Received In The Last: \" + unitsInText + \"\\n\\n\";\n            }\n          \n            let messages = await getMessages( numHours * 3600 );\n            let groupDetails = await helpers.callGroupDetails(ACCESS_TOKEN);\n            let members = groupDetails.members;\n            let heartCounts = [];\n            let groupTotal = [];\n\n            for (let member of members) {\n                let count = 0;\n                for (let message of messages) {\n                    if (member.user_id == message.user_id) {\n                        count += message.favorited_by.length;\n                    }\n                }\n\n                let heartCount = member.nickname + \": \" + count;\n                heartCounts.push(heartCount);\n\n                // lets be smart about storing this so we can sort it     \n                let userTotal={\n                  \"member\": member.nickname,\n                  \"count\": count\n                }\n                \n                console.log(userTotal);\n                \n                // add data to groupTotal sorted by total\n                if( groupTotal.length == 0 ){\n                  // if this shit's empty, just push it\n                  groupTotal.push(userTotal);\n                }else{\n                  let added = false;\n                  \n                  // else, look through the current groupTotal\n                  for(let i =0; i< groupTotal.length; i++){\n\n                    // if the userTotal at this index is less than the one we are trying to add\n                    if( groupTotal[i].count <= userTotal.count ){\n                      // splice this new usertotal into the group total\n                      groupTotal.splice(i, 0, userTotal );\n                      added = true;\n                      break;\n                    }\n                  }\n                  if(!added){\n                    groupTotal.push(userTotal);\n                  }\n                }\n            }\n\n            groupTotal.forEach(function(item,index,array){\n                  botMessage += (index+1) + \". \" + item.member + \" : \" + item.count + \"\\n\";\n            });\n          \n            consoleMessage = \"Bot sent a heart count reply.\";\n\n        } else if (text.includes(\"/lastseen\")) {\n            let user_id = req.body.attachments[0].user_ids[0];\n            let last_seen = 0;\n            let messages = await getAllMessages();\n            console.log(user_id);\n            for (let message of messages) {\n                if (user_id === message.user_id) {\n                    last_seen = message.created_at;\n                    break;\n                }\n            }\n            if (last_seen == 0) {\n                botMessage = user_id + \" hasn't been seen yet.\"\n            } else {\n                let dateF = new Date(last_seen * 1000);\n                botMessage = dateF.toUTCString();\n            }\n\n            console.log(last_seen);\n            consoleMessage = \"Bot sent a last seen timestamp reply.\";\n\n        } else if (text.includes(\"/personality\")) {\n            console.log(text);\n\n            let sinceHours = text.match(/\\d+$/);\n            console.log(\"sinceHours: \" + sinceHours);\n            if (!sinceHours) {\n                sinceHours = 0;\n            }\n\n            let messages = await getAllMessages();\n            let user_id = req.body.attachments[0].user_ids[0];\n            let dateNow = new Date();\n            let contentItems = [];\n            let i = 0;\n            let username = \"\";\n            for (let message of messages) {\n                if (user_id === message.user_id) {\n                    username = message.name;\n                    let dateMsg = new Date(message.created_at * 1000);\n                    let hourDiff = Math.abs(dateNow - dateMsg) / 36e5;\n\n                    if (sinceHours !== 0 && sinceHours < hourDiff) {\n                        console.log(\"Loop breaks at \" + i + \" times.\");\n                        break;\n                    }\n\n                    if (!message.text) {\n                        console.log(\"Empty text.\");\n                        continue;\n                    }\n\n                    contentItems.push({\n                        \"content\": message.text,\n                        \"contenttype\": \"text/plain\",\n                        \"created\": message.created_at,\n                        \"id\": message.id,\n                        \"language\": \"en\"\n                    });\n                    i++;\n                }\n            }\n\n            let personalityInsights = await PersonalityInsights.getPersonalityInsights(contentItems);\n            console.log(\"Personality response length: \" + personalityInsights.personality.length);\n            botMessage = username + \" has been \";\n            if (sinceHours > 0) {\n                botMessage += personalityInsights.personality[0].name.toLowerCase() + \" over the past \" + sinceHours.toString() + \" hours\";\n            } else {\n                let id = Math.round(Math.random() * (personalityInsights.personality.length - 1));\n                botMessage += personalityInsights.personality[id].name.toLowerCase();\n            }\n\n            botMessage += \".\";\n            consoleMessage = \"Bot sent a Personality Insights reply.\";\n        }else if(text.includes(\"/stats\")){\n            // this whole thing needs checks to make sure the syntax is:\n            // syntax:   /stats number units\n            // example:  /stats 5 days\n\n            // pop the command into an array\n            let textArray = text.split(\" \");\n            // if length is greater than 1 we have a number\n            let hasNumber = textArray.length > 1;\n            // if length is greater than 2 we have units\n            let hasUnits = textArray.length > 2;\n\n            // if we don't have a number, numHours = 0\n            let numHours = hasNumber ? textArray[1] : 0;\n            // if we have units, use the units as a mulitplier\n\n            // plural will be 1 if we are asking for more than 1 of a unit\n            let plural = numHours == 1 ? 0 : 1;\n\n            // default unitsInText\n            let unitsInText =  numHours + \" hour\";\n\n            if (hasUnits) {\n                let units = textArray[2];\n\n                if (units.includes(\"hour\")) {\n                    // do nothing\n                }\n                else if (units.includes(\"day\")) {\n                    // 24 hours in a day\n                    unitsInText = numHours + \" day\";\n                    numHours *= 24;\n                }\n                else if  (units.includes(\"week\")) {\n                    // 7 days in a week\n                    unitsInText = numHours + \" week\";\n                    numHours *= 24 * 7;\n                }\n                else if  (units.includes(\"month\")) {\n                    // 4 weeks in (most) months\n                    unitsInText = numHours + \" month\";\n                    numHours *= 24 * 7 * 4\n                }\n                else if  (units.includes(\"year\")) {\n                    // 365 days in a year\n                    unitsInText = numHours + \" year\";\n                    numHours *= 24 * 365;\n                }\n\n            }\n            if (plural) {\n                unitsInText += \"s\";\n            }\n            \n            if (numHours == 0) {\n                botMessage = \"Stats All Time\\n\\n\";\n                numHours = new Date().getTime()/(1000*3600)-1;\n            } else {\n                botMessage = \"Stats In The Last: \" + unitsInText + \"\\n\\n\";\n            }\n\n          let messages = await getMessages(numHours *3600);\n          let groupDetails = await helpers.callGroupDetails(ACCESS_TOKEN);\n          let members = groupDetails.members;\n\n          console.log(members);\n          \n          let stats = {};\n          for( let memberA of members){\n            stats[memberA.user_id] = {};\n            stats[memberA.user_id].nickname = memberA.nickname;\n            stats[memberA.user_id].user_id = memberA.user_id;\n            stats[memberA.user_id].hearts_from = {};\n            stats[memberA.user_id].hearts_total = 0;\n            stats[memberA.user_id].messages_total = 0;\n            for( let memberB of members){\n              stats[memberA.user_id].hearts_from[memberB.user_id]=0; \n            }\n          }\n\n          for(let message of messages){\n            if(message.sender_type == 'user'){\n              stats[message.user_id].messages_total++;\n              for( let heart of message.favorited_by){\n                stats[message.user_id].hearts_from[heart]++;\n                stats[message.user_id].hearts_total++;\n              }\n            }\n          }\n\n          for( let memberA of members ){\n            let stat = stats[memberA.user_id];\n            botMessage+= \"\\\"\"+ memberA.nickname + \"\\\" received: \" + stats[memberA.user_id].hearts_total + \" hearts over \" + stats[memberA.user_id].messages_total + \" message(s) ... \";\n            if(stats[memberA.user_id].messages_total != 0){\n              botMessage+= (stats[memberA.user_id].hearts_total/stats[memberA.user_id].messages_total).toFixed(2) + \" HPM\\n\";\n            }else{\n              botMessage +=\"\\n\";\n            }\n            for( let memberB of members ){\n              botMessage+= \"-\" +memberB.nickname +\": \" +  stats[memberA.user_id].hearts_from[memberB.user_id] + \"\\n\"\n            }\n            botMessage +=\"\\n\";\n          }\n          \n      }\n\n    }\n\n    if (botMessage) {\n        let opts = {\n            picture_url: \"\",\n        }\n        API.Bots.post(ACCESS_TOKEN, BOT_ID, botMessage, opts, function(err, ret) {\n            if (!err) {\n                console.log(botMessage);\n                console.log(consoleMessage);\n            }\n        });\n    }\n}\n\n\nexport const getAllMessages = async function() {\n    let messages = [];\n    const limit = 100;\n    console.log(\"Get messages.\");\n    let messageTemp = await helpers.callGetMessages({\n        group_id: GROUP_ID,\n        token: ACCESS_TOKEN,\n        before_id: 0\n    });\n    let messageCount = messageTemp.count;\n    messages = messageTemp.messages;\n\n    console.log(messageTemp.count);\n    console.log(messageTemp.messages.length);\n    if (messageCount > limit) {\n        let beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n        for (let i = limit; i < messageCount; i += limit) {\n            console.log(\"Before ID: \" + beforeId + \" Count: \" + i);\n            if (i >= limit) {\n                messageTemp = await helpers.callGetMessages({\n                    group_id: GROUP_ID,\n                    token: ACCESS_TOKEN,\n                    before_id: beforeId\n                });\n                console.log(\"Next message count: \" + messageTemp.count + \" -- \" + messageTemp.messages.length);\n                beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n                Array.prototype.push.apply(messages, messageTemp.messages);\n            }\n        }\n    }\n    console.log(\"Get messages done.\");\n    console.log(\"Total messages: \" + messages.length);\n    return messages;\n}\n\nexport const countWords = function(messages) {\n    let totalWords = 0;\n    for (let message of messages) {\n        if (\"bot\" === message.sender_type) { // Ignore bot messages\n            continue;\n        }\n\n        let text = message.text;\n        if (isEmpty(text)) {\n            continue;\n        }\n        totalWords += text.trim().split(/\\s+/).length;\n    }\n    return totalWords;\n\n}\n\nexport const groupMeWordCount = function(messages, word) {\n    let wordsCount = 0;\n    for (let message of messages) {\n\n        if (\"bot\" === message.sender_type) { // Ignore bot messages\n            continue;\n        }\n\n        let text = message.text;\n        if (isEmpty(text)) {\n            continue;\n        }\n        if (text.includes(word)) {\n            wordsCount++;\n        }\n    }\n    return wordsCount;\n}\n\nexport const isEmpty = function(str) {\n    return (!str || 0 === str.length);\n}\n\nexport const getMessages = async function(seconds) {\n  console.log(\"Getting \" + seconds + \" seconds worth of messages.\");\n  \n\t// array to hold the messages we return\n  let messages = [];\t\n\t// getTime returns milli seconds since epoch, divide by 1k to conver to seconds and subtract how many seconds we care about\n\tlet seekTime = (new Date().getTime()/1000) - seconds;\n\n\tlet searchComplete = false;\n\tlet beforeId = 0;\n  let limit = 100;\n  let totalMessageCount = 0;\n\tdo{\n\t\t// get a chunk of messages \n\t\tlet data = await helpers.getMessageWrapper({\n\t\t\tgroup_id: GROUP_ID,\n\t\t\ttoken: ACCESS_TOKEN,\n\t\t\tbefore_id: beforeId,\n      limit: limit\n\t\t});\n\n    // set our request limit to the number of messages remaining\n    limit = data.count - messages.length;\n    totalMessageCount = data.count;\n    \n    // if limit is greater than 100, default to 100\n    limit = limit > 100 ? 100 : limit;\n    \n    // if limit is less than 100, set to 0.. who knows why.\n    limit = limit < 100 ? 0 : limit;\n    \n\t\t// loop through the chunk\n\t\tfor( let i = 0; i< data.messages.length; i++){\n      // see if this message timestamp is after our seek time\n\t\t\tif( data.messages[i].created_at > seekTime ){\n        // add it to our messages array\n        messages.push(data.messages[i]);\n\t\t\t}else{\n        // search is complete! set some flag and gtfo\n\t\t\t\tsearchComplete = true;\n        break;\n\t\t\t}\n\t\t}\n    \t\t\n\t\t// reassign the before id for the next chunk request\n    beforeId = data.messages[data.messages.length - 1 ].id;\n  }while( searchComplete == false && limit > 0);\n\n  console.log(\"Received \" + messages.length + \" of \" + totalMessageCount + \" messages.\");\n  return messages;\n}"
      ]
    },
    "mtime": 1508231153598
  },
  "{\"filename\":\"/app/data/PersonalityInsights.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator"
      ],
      "marked": [],
      "modules": {
        "imports": [],
        "exports": {
          "exported": [
            "getPersonalityInsights"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "getPersonalityInsights",
              "exported": "getPersonalityInsights"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/PersonalityInsights.js",
      "filenameRelative": "/app/data/PersonalityInsights.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "PersonalityInsights.js",
      "sourceFileName": "PersonalityInsights.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "PersonalityInsights"
    },
    "ignored": false,
    "code": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/**\n * Created by omolina on 6/19/2017.\n */\n\nvar getPersonalityInsights = exports.getPersonalityInsights = function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(contentItems) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        return _context.abrupt('return', new Promise(function (resolve, reject) {\n                            //can't get 'await' to work with\n                            console.log(\"Calling Personality Insights API\");\n                            var PersonalityInsightsV3 = require('watson-developer-cloud/personality-insights/v3');\n                            var personality_insights = new PersonalityInsightsV3({\n                                username: '950c87e1-660c-4dac-82ae-e27334d64267',\n                                password: 'BCp2en2kSWFm',\n                                version_date: '2016-10-20'\n                            });\n\n                            var params = {\n                                // Get the content items from the JSON file.\n                                content_items: contentItems,\n                                consumption_preferences: true,\n                                raw_scores: true,\n                                headers: {\n                                    'accept-language': 'en',\n                                    'accept': 'application/json'\n                                }\n                            };\n\n                            personality_insights.profile(params, function (error, response) {\n                                if (error) reject(error);else resolve(JSON.parse(JSON.stringify(response, null, 2)));\n                            });\n                        }));\n\n                    case 1:\n                    case 'end':\n                        return _context.stop();\n                }\n            }\n        }, _callee, this);\n    }));\n\n    return function getPersonalityInsights(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBlcnNvbmFsaXR5SW5zaWdodHMuanMiXSwibmFtZXMiOlsiZ2V0UGVyc29uYWxpdHlJbnNpZ2h0cyIsImNvbnRlbnRJdGVtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uc29sZSIsImxvZyIsIlBlcnNvbmFsaXR5SW5zaWdodHNWMyIsInJlcXVpcmUiLCJwZXJzb25hbGl0eV9pbnNpZ2h0cyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ2ZXJzaW9uX2RhdGUiLCJwYXJhbXMiLCJjb250ZW50X2l0ZW1zIiwiY29uc3VtcHRpb25fcHJlZmVyZW5jZXMiLCJyYXdfc2NvcmVzIiwiaGVhZGVycyIsInByb2ZpbGUiLCJlcnJvciIsInJlc3BvbnNlIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBSU8sSUFBTUE7QUFBQSx5REFBeUIsaUJBQWdCQyxZQUFoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEseURBQzNCLElBQUlDLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUFFO0FBQzVDQyxvQ0FBUUMsR0FBUixDQUFZLGtDQUFaO0FBQ0EsZ0NBQUlDLHdCQUF3QkMsUUFBUSxnREFBUixDQUE1QjtBQUNBLGdDQUFJQyx1QkFBdUIsSUFBSUYscUJBQUosQ0FBMEI7QUFDakRHLDBDQUFVLHNDQUR1QztBQUVqREMsMENBQVUsY0FGdUM7QUFHakRDLDhDQUFjO0FBSG1DLDZCQUExQixDQUEzQjs7QUFNQSxnQ0FBSUMsU0FBUztBQUNUO0FBQ0FDLCtDQUFlYixZQUZOO0FBR1RjLHlEQUF5QixJQUhoQjtBQUlUQyw0Q0FBWSxJQUpIO0FBS1RDLHlDQUFTO0FBQ0wsdURBQW1CLElBRGQ7QUFFTCw4Q0FBVTtBQUZMO0FBTEEsNkJBQWI7O0FBV0FSLGlEQUFxQlMsT0FBckIsQ0FBNkJMLE1BQTdCLEVBQXFDLFVBQVVNLEtBQVYsRUFBaUJDLFFBQWpCLEVBQTJCO0FBQ3hELG9DQUFJRCxLQUFKLEVBQ0lmLE9BQU9lLEtBQVAsRUFESixLQUdJaEIsUUFBUWtCLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsU0FBTCxDQUFlSCxRQUFmLEVBQXlCLElBQXpCLEVBQStCLENBQS9CLENBQVgsQ0FBUjtBQUNQLDZCQUxMO0FBT0gseUJBM0JNLENBRDJCOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQXpCOztBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQU4iLCJmaWxlIjoiUGVyc29uYWxpdHlJbnNpZ2h0cy5qcyIsInNvdXJjZVJvb3QiOiIvYXBwL2RhdGEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgb21vbGluYSBvbiA2LzE5LzIwMTcuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGdldFBlcnNvbmFsaXR5SW5zaWdodHMgPSBhc3luYyBmdW5jdGlvbiAoY29udGVudEl0ZW1zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgLy9jYW4ndCBnZXQgJ2F3YWl0JyB0byB3b3JrIHdpdGhcbiAgICAgICAgY29uc29sZS5sb2coXCJDYWxsaW5nIFBlcnNvbmFsaXR5IEluc2lnaHRzIEFQSVwiKTtcbiAgICAgICAgbGV0IFBlcnNvbmFsaXR5SW5zaWdodHNWMyA9IHJlcXVpcmUoJ3dhdHNvbi1kZXZlbG9wZXItY2xvdWQvcGVyc29uYWxpdHktaW5zaWdodHMvdjMnKTtcbiAgICAgICAgbGV0IHBlcnNvbmFsaXR5X2luc2lnaHRzID0gbmV3IFBlcnNvbmFsaXR5SW5zaWdodHNWMyh7XG4gICAgICAgICAgICB1c2VybmFtZTogJzk1MGM4N2UxLTY2MGMtNGRhYy04MmFlLWUyNzMzNGQ2NDI2NycsXG4gICAgICAgICAgICBwYXNzd29yZDogJ0JDcDJlbjJrU1dGbScsXG4gICAgICAgICAgICB2ZXJzaW9uX2RhdGU6ICcyMDE2LTEwLTIwJ1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBjb250ZW50IGl0ZW1zIGZyb20gdGhlIEpTT04gZmlsZS5cbiAgICAgICAgICAgIGNvbnRlbnRfaXRlbXM6IGNvbnRlbnRJdGVtcyxcbiAgICAgICAgICAgIGNvbnN1bXB0aW9uX3ByZWZlcmVuY2VzOiB0cnVlLFxuICAgICAgICAgICAgcmF3X3Njb3JlczogdHJ1ZSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuJyxcbiAgICAgICAgICAgICAgICAnYWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcGVyc29uYWxpdHlfaW5zaWdodHMucHJvZmlsZShwYXJhbXMsIGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UsIG51bGwsIDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSk7XG59XG5cblxuXG4iXX0=",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "PersonalityInsights.js"
      ],
      "names": [
        "getPersonalityInsights",
        "contentItems",
        "Promise",
        "resolve",
        "reject",
        "console",
        "log",
        "PersonalityInsightsV3",
        "require",
        "personality_insights",
        "username",
        "password",
        "version_date",
        "params",
        "content_items",
        "consumption_preferences",
        "raw_scores",
        "headers",
        "profile",
        "error",
        "response",
        "JSON",
        "parse",
        "stringify"
      ],
      "mappings": ";;;;;;;;AAAA;;;;AAIO,IAAMA;AAAA,yDAAyB,iBAAgBC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,yDAC3B,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAAE;AAC5CC,oCAAQC,GAAR,CAAY,kCAAZ;AACA,gCAAIC,wBAAwBC,QAAQ,gDAAR,CAA5B;AACA,gCAAIC,uBAAuB,IAAIF,qBAAJ,CAA0B;AACjDG,0CAAU,sCADuC;AAEjDC,0CAAU,cAFuC;AAGjDC,8CAAc;AAHmC,6BAA1B,CAA3B;;AAMA,gCAAIC,SAAS;AACT;AACAC,+CAAeb,YAFN;AAGTc,yDAAyB,IAHhB;AAITC,4CAAY,IAJH;AAKTC,yCAAS;AACL,uDAAmB,IADd;AAEL,8CAAU;AAFL;AALA,6BAAb;;AAWAR,iDAAqBS,OAArB,CAA6BL,MAA7B,EAAqC,UAAUM,KAAV,EAAiBC,QAAjB,EAA2B;AACxD,oCAAID,KAAJ,EACIf,OAAOe,KAAP,EADJ,KAGIhB,QAAQkB,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeH,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAX,CAAR;AACP,6BALL;AAOH,yBA3BM,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA,GAAN",
      "file": "PersonalityInsights.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "/**\n * Created by omolina on 6/19/2017.\n */\n\nexport const getPersonalityInsights = async function (contentItems) {\n    return new Promise(function (resolve, reject) { //can't get 'await' to work with\n        console.log(\"Calling Personality Insights API\");\n        let PersonalityInsightsV3 = require('watson-developer-cloud/personality-insights/v3');\n        let personality_insights = new PersonalityInsightsV3({\n            username: '950c87e1-660c-4dac-82ae-e27334d64267',\n            password: 'BCp2en2kSWFm',\n            version_date: '2016-10-20'\n        });\n\n        let params = {\n            // Get the content items from the JSON file.\n            content_items: contentItems,\n            consumption_preferences: true,\n            raw_scores: true,\n            headers: {\n                'accept-language': 'en',\n                'accept': 'application/json'\n            }\n        };\n\n        personality_insights.profile(params, function (error, response) {\n                if (error)\n                    reject(error);\n                else\n                    resolve(JSON.parse(JSON.stringify(response, null, 2)));\n            }\n        );\n    });\n}\n\n\n\n"
      ]
    },
    "mtime": 1508231153606
  },
  "{\"filename\":\"/app/data/GroupMeUtils.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[{\"presets\":[{\"plugins\":[null]}],\"plugins\":[[[],null],[[],null],[[],null]],\"env\":{\"development\":{\"plugins\":[]}}},{\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{\"async\":false,\"asyncGenerators\":false}]]},{\"presets\":[{\"presets\":[{\"presets\":[{\"plugins\":[null,null,null,null,null]}],\"plugins\":[null,null,null]}],\"plugins\":[null,null]}],\"plugins\":[[[],null],[[],null]]}],\"plugins\":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app/data\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":true,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "asyncToGenerator",
        "interopRequireWildcard",
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "./helpers",
            "imported": [
              "*"
            ],
            "specifiers": [
              {
                "kind": "namespace",
                "local": "helpers"
              }
            ]
          },
          {
            "source": "./PersonalityInsights",
            "imported": [
              "*"
            ],
            "specifiers": [
              {
                "kind": "namespace",
                "local": "PersonalityInsights"
              }
            ]
          },
          {
            "source": "dotenv",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "dotenvConfig"
              }
            ]
          }
        ],
        "exports": {
          "exported": [
            "postBotMessage",
            "getAllMessages",
            "countWords",
            "groupMeWordCount",
            "isEmpty",
            "getMessages"
          ],
          "specifiers": [
            {
              "kind": "local",
              "local": "postBotMessage",
              "exported": "postBotMessage"
            },
            {
              "kind": "local",
              "local": "getAllMessages",
              "exported": "getAllMessages"
            },
            {
              "kind": "local",
              "local": "countWords",
              "exported": "countWords"
            },
            {
              "kind": "local",
              "local": "groupMeWordCount",
              "exported": "groupMeWordCount"
            },
            {
              "kind": "local",
              "local": "isEmpty",
              "exported": "isEmpty"
            },
            {
              "kind": "local",
              "local": "getMessages",
              "exported": "getMessages"
            }
          ]
        }
      }
    },
    "options": {
      "filename": "/app/data/GroupMeUtils.js",
      "filenameRelative": "/app/data/GroupMeUtils.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [
        {
          "presets": [
            {
              "plugins": [
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ],
          "env": {
            "development": {
              "plugins": []
            }
          }
        },
        {
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              null
            ],
            [
              [],
              {
                "async": false,
                "asyncGenerators": false
              }
            ]
          ]
        },
        {
          "presets": [
            {
              "presets": [
                {
                  "presets": [
                    {
                      "plugins": [
                        null,
                        null,
                        null,
                        null,
                        null
                      ]
                    }
                  ],
                  "plugins": [
                    null,
                    null,
                    null
                  ]
                }
              ],
              "plugins": [
                null,
                null
              ]
            }
          ],
          "plugins": [
            [
              [],
              null
            ],
            [
              [],
              null
            ]
          ]
        }
      ],
      "plugins": [
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "GroupMeUtils.js",
      "sourceFileName": "GroupMeUtils.js",
      "sourceRoot": "/app/data",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app/data",
      "moduleIds": false,
      "passPerPreset": true,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "GroupMeUtils"
    },
    "ignored": false,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getMessages = exports.isEmpty = exports.groupMeWordCount = exports.countWords = exports.getAllMessages = exports.postBotMessage = undefined;\n\nvar _helpers = require(\"./helpers\");\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _PersonalityInsights = require(\"./PersonalityInsights\");\n\nvar PersonalityInsights = _interopRequireWildcard(_PersonalityInsights);\n\nvar _dotenv = require(\"dotenv\");\n\nvar _dotenv2 = _interopRequireDefault(_dotenv);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n_dotenv2.default.config();\n\nvar ACCESS_TOKEN = process.env.ACCESS_TOKEN;\nvar BOT_ID = process.env.BOT_ID;\nvar GROUP_ID = process.env.GROUP_ID;\nvar API = require('groupme').Stateless;\n\n// when we receive a message\nvar postBotMessage = exports.postBotMessage = function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(req) {\n        var consoleMessage, botMessage, sender_type, text, randomText, id, textArray, messages, word, wordCount, totalWords, _textArray, hasNumber, hasUnits, numHours, plural, unitsInText, units, _messages, groupDetails, members, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, member, totalHumanMessages, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, message, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _member, stats, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _member2, added, i, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, stat, botCount, _textArray2, _hasNumber, _hasUnits, _numHours, _plural, _unitsInText, _units, _messages2, _groupDetails, _members, heartCounts, groupTotal, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _member3, count, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _message, heartCount, userTotal, _added, _i, user_id, last_seen, _messages3, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _message2, dateF, sinceHours, _messages4, _user_id, dateNow, contentItems, _i2, username, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, _message3, dateMsg, hourDiff, personalityInsights, _id, _textArray3, _hasNumber2, _hasUnits2, _numHours2, _plural2, _unitsInText2, _units2, _messages5, _groupDetails2, _members2, _stats, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, memberA, _iteratorNormalCompletion13, _didIteratorError13, _iteratorError13, _iterator13, _step13, memberB, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _message4, _iteratorNormalCompletion14, _didIteratorError14, _iteratorError14, _iterator14, _step14, heart, _iteratorNormalCompletion12, _didIteratorError12, _iteratorError12, _iterator12, _step12, _memberA, _stat, _iteratorNormalCompletion15, _didIteratorError15, _iteratorError15, _iterator15, _step15, _memberB, opts;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n                switch (_context.prev = _context.next) {\n                    case 0:\n                        console.log(\"Request Payload\");\n                        console.log(req.body);\n                        consoleMessage = \"\";\n                        botMessage = \"\";\n                        sender_type = req.body.sender_type;\n                        text = isEmpty(req.body.text) ? req.body.text : req.body.text.trim();\n\n                        // if from a bot, ignore it\n\n                        if (!(sender_type === \"bot\")) {\n                            _context.next = 10;\n                            break;\n                        }\n\n                        console.log(\"No action..\");\n\n                        // else if it's from a user\n                        _context.next = 529;\n                        break;\n\n                    case 10:\n                        if (!(sender_type === \"user\")) {\n                            _context.next = 529;\n                            break;\n                        }\n\n                        // convert all text to lowercase for easier parsing\n                        text = text.toLowerCase();\n\n                        if (!['hi', 'hello'].includes(text)) {\n                            _context.next = 19;\n                            break;\n                        }\n\n                        // library of responses to the above 'if'\n                        randomText = ['Hi, I am the ArmBot', 'Hello you bitch, you!', 'Seh-hent', 'Oooooop!', 'My shoes are ruined!', 'I was caught in a starm', 'Hello, Rouis.', 'We are all Blue Henns!', 'Smells like my asshole bro..', 'Uhhghh!! Can I get my face backkk?!'];\n                        // pick a random index and spit it back\n\n                        id = Math.round(Math.random() * (randomText.length - 1));\n\n                        botMessage = randomText[id];\n                        consoleMessage = \"Bot sent hi reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 19:\n                        if (!text.includes(\"/wordcount\")) {\n                            _context.next = 41;\n                            break;\n                        }\n\n                        textArray = text.split(\" \");\n                        _context.next = 23;\n                        return getAllMessages();\n\n                    case 23:\n                        messages = _context.sent;\n\n\n                        console.log(\"Command length: \" + textArray.length);\n\n                        if (!(textArray.length > 1)) {\n                            _context.next = 34;\n                            break;\n                        }\n\n                        word = textArray[1];\n\n                        console.log(\"Count word instances: \" + word);\n                        _context.next = 30;\n                        return groupMeWordCount(messages, word);\n\n                    case 30:\n                        wordCount = _context.sent;\n\n                        botMessage = \"\\\"\" + word + \"\\\" was said \" + wordCount.toString() + \" times\";\n                        _context.next = 38;\n                        break;\n\n                    case 34:\n                        _context.next = 36;\n                        return countWords(messages);\n\n                    case 36:\n                        totalWords = _context.sent;\n\n                        botMessage = \"Total words of all time: \" + totalWords;\n\n                    case 38:\n                        consoleMessage = \"Bot sent a word count reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 41:\n                        if (!text.includes(\"/messages\")) {\n                            _context.next = 185;\n                            break;\n                        }\n\n                        // this whole thing needs checks to make sure the syntax is:\n                        // syntax:   /hearts number units\n                        // example:  /hearts 5 days\n\n                        // pop the command into an array\n                        _textArray = text.split(\" \");\n                        // if length is greater than 1 we have a number\n\n                        hasNumber = _textArray.length > 1;\n                        // if length is greater than 2 we have units\n\n                        hasUnits = _textArray.length > 2;\n\n                        // if we don't have a number, numHours = 0\n\n                        numHours = hasNumber ? _textArray[1] : 0;\n                        // if we have units, use the units as a mulitplier\n\n                        // plural will be 1 if we are asking for more than 1 of a unit\n\n                        plural = numHours == 1 ? 0 : 1;\n\n                        // default unitsInText\n\n                        unitsInText = numHours + \" hour\";\n\n\n                        if (hasUnits) {\n                            units = _textArray[2];\n\n\n                            if (units.includes(\"hour\")) {\n                                // do nothing\n                            } else if (units.includes(\"day\")) {\n                                // 24 hours in a day\n                                unitsInText = numHours + \" day\";\n                                numHours *= 24;\n                            } else if (units.includes(\"week\")) {\n                                // 7 days in a week\n                                unitsInText = numHours + \" week\";\n                                numHours *= 24 * 7;\n                            } else if (units.includes(\"month\")) {\n                                // 4 weeks in (most) months\n                                unitsInText = numHours + \" month\";\n                                numHours *= 24 * 7 * 4;\n                            } else if (units.includes(\"year\")) {\n                                // 365 days in a year\n                                unitsInText = numHours + \" year\";\n                                numHours *= 24 * 365;\n                            }\n                        }\n                        if (plural) {\n                            unitsInText += \"s\";\n                        }\n\n                        // if no time entered, modify to ask for ALL TIME\n                        if (numHours === 0) {\n                            numHours = new Date().getTime() / (1000 * 3600) - 1;\n                            botMessage = \"Messages Sent All Time\\n\\n\";\n                        } else {\n                            botMessage = \"Messages Sent In The Last: \" + unitsInText + \"\\n\\n\";\n                        }\n\n                        // request the messages from N seconds ago till now\n                        _context.next = 53;\n                        return getMessages(numHours * 3600);\n\n                    case 53:\n                        _messages = _context.sent;\n                        _context.next = 56;\n                        return helpers.callGroupDetails(ACCESS_TOKEN);\n\n                    case 56:\n                        groupDetails = _context.sent;\n                        members = groupDetails.members;\n\n                        // create a 'message count' field for each member\n\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _iteratorError = undefined;\n                        _context.prev = 61;\n                        for (_iterator = members[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            member = _step.value;\n\n                            member.message_count = 0;\n                        }\n\n                        // loop through all the messages and increment the users messages count\n                        _context.next = 69;\n                        break;\n\n                    case 65:\n                        _context.prev = 65;\n                        _context.t0 = _context[\"catch\"](61);\n                        _didIteratorError = true;\n                        _iteratorError = _context.t0;\n\n                    case 69:\n                        _context.prev = 69;\n                        _context.prev = 70;\n\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n\n                    case 72:\n                        _context.prev = 72;\n\n                        if (!_didIteratorError) {\n                            _context.next = 75;\n                            break;\n                        }\n\n                        throw _iteratorError;\n\n                    case 75:\n                        return _context.finish(72);\n\n                    case 76:\n                        return _context.finish(69);\n\n                    case 77:\n                        totalHumanMessages = 0;\n                        _iteratorNormalCompletion2 = true;\n                        _didIteratorError2 = false;\n                        _iteratorError2 = undefined;\n                        _context.prev = 81;\n                        _iterator2 = _messages[Symbol.iterator]();\n\n                    case 83:\n                        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                            _context.next = 107;\n                            break;\n                        }\n\n                        message = _step2.value;\n                        _iteratorNormalCompletion5 = true;\n                        _didIteratorError5 = false;\n                        _iteratorError5 = undefined;\n                        _context.prev = 88;\n\n                        for (_iterator5 = members[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                            _member = _step5.value;\n\n                            if (_member.user_id == message.user_id) {\n                                totalHumanMessages++;\n                                _member.message_count++;\n                            }\n                        }\n                        _context.next = 96;\n                        break;\n\n                    case 92:\n                        _context.prev = 92;\n                        _context.t1 = _context[\"catch\"](88);\n                        _didIteratorError5 = true;\n                        _iteratorError5 = _context.t1;\n\n                    case 96:\n                        _context.prev = 96;\n                        _context.prev = 97;\n\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n\n                    case 99:\n                        _context.prev = 99;\n\n                        if (!_didIteratorError5) {\n                            _context.next = 102;\n                            break;\n                        }\n\n                        throw _iteratorError5;\n\n                    case 102:\n                        return _context.finish(99);\n\n                    case 103:\n                        return _context.finish(96);\n\n                    case 104:\n                        _iteratorNormalCompletion2 = true;\n                        _context.next = 83;\n                        break;\n\n                    case 107:\n                        _context.next = 113;\n                        break;\n\n                    case 109:\n                        _context.prev = 109;\n                        _context.t2 = _context[\"catch\"](81);\n                        _didIteratorError2 = true;\n                        _iteratorError2 = _context.t2;\n\n                    case 113:\n                        _context.prev = 113;\n                        _context.prev = 114;\n\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n\n                    case 116:\n                        _context.prev = 116;\n\n                        if (!_didIteratorError2) {\n                            _context.next = 119;\n                            break;\n                        }\n\n                        throw _iteratorError2;\n\n                    case 119:\n                        return _context.finish(116);\n\n                    case 120:\n                        return _context.finish(113);\n\n                    case 121:\n\n                        // sort these stats\n                        stats = [];\n                        _iteratorNormalCompletion3 = true;\n                        _didIteratorError3 = false;\n                        _iteratorError3 = undefined;\n                        _context.prev = 125;\n                        _iterator3 = members[Symbol.iterator]();\n\n                    case 127:\n                        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                            _context.next = 147;\n                            break;\n                        }\n\n                        _member2 = _step3.value;\n\n                        if (!(stats.length == 0)) {\n                            _context.next = 133;\n                            break;\n                        }\n\n                        // if this shit's empty, just push it\n                        stats.push(_member2);\n                        _context.next = 144;\n                        break;\n\n                    case 133:\n                        added = false;\n\n                        // else, look through the current groupTotal\n\n                        i = 0;\n\n                    case 135:\n                        if (!(i < stats.length)) {\n                            _context.next = 143;\n                            break;\n                        }\n\n                        if (!(stats[i].message_count <= _member2.message_count)) {\n                            _context.next = 140;\n                            break;\n                        }\n\n                        // splice this new usertotal into the group total\n                        stats.splice(i, 0, _member2);\n                        added = true;\n                        return _context.abrupt(\"break\", 143);\n\n                    case 140:\n                        i++;\n                        _context.next = 135;\n                        break;\n\n                    case 143:\n                        if (!added) {\n                            stats.push(_member2);\n                        }\n\n                    case 144:\n                        _iteratorNormalCompletion3 = true;\n                        _context.next = 127;\n                        break;\n\n                    case 147:\n                        _context.next = 153;\n                        break;\n\n                    case 149:\n                        _context.prev = 149;\n                        _context.t3 = _context[\"catch\"](125);\n                        _didIteratorError3 = true;\n                        _iteratorError3 = _context.t3;\n\n                    case 153:\n                        _context.prev = 153;\n                        _context.prev = 154;\n\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n\n                    case 156:\n                        _context.prev = 156;\n\n                        if (!_didIteratorError3) {\n                            _context.next = 159;\n                            break;\n                        }\n\n                        throw _iteratorError3;\n\n                    case 159:\n                        return _context.finish(156);\n\n                    case 160:\n                        return _context.finish(153);\n\n                    case 161:\n                        _iteratorNormalCompletion4 = true;\n                        _didIteratorError4 = false;\n                        _iteratorError4 = undefined;\n                        _context.prev = 164;\n\n\n                        for (_iterator4 = stats[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            stat = _step4.value;\n\n                            botMessage += stat.nickname + \": \" + stat.message_count + \" messages (\" + (100 * (stat.message_count / _messages.length)).toFixed(2) + \"%)\\n\";\n                        }\n\n                        _context.next = 172;\n                        break;\n\n                    case 168:\n                        _context.prev = 168;\n                        _context.t4 = _context[\"catch\"](164);\n                        _didIteratorError4 = true;\n                        _iteratorError4 = _context.t4;\n\n                    case 172:\n                        _context.prev = 172;\n                        _context.prev = 173;\n\n                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                            _iterator4.return();\n                        }\n\n                    case 175:\n                        _context.prev = 175;\n\n                        if (!_didIteratorError4) {\n                            _context.next = 178;\n                            break;\n                        }\n\n                        throw _iteratorError4;\n\n                    case 178:\n                        return _context.finish(175);\n\n                    case 179:\n                        return _context.finish(172);\n\n                    case 180:\n                        botCount = _messages.length - totalHumanMessages;\n\n                        botMessage += \"ArmBot: \" + botCount + \" messages (\" + (100 * (botCount / _messages.length)).toFixed(2) + \"%)\\n\";\n                        botMessage += \"\\nTotal Messages: \" + _messages.length;\n\n                        _context.next = 529;\n                        break;\n\n                    case 185:\n                        if (!text.includes(\"/hearts\")) {\n                            _context.next = 271;\n                            break;\n                        }\n\n                        // this whole thing needs checks to make sure the syntax is:\n                        // syntax:   /hearts number units\n                        // example:  /hearts 5 days\n\n                        // pop the command into an array\n                        _textArray2 = text.split(\" \");\n                        // if length is greater than 1 we have a number\n\n                        _hasNumber = _textArray2.length > 1;\n                        // if length is greater than 2 we have units\n\n                        _hasUnits = _textArray2.length > 2;\n\n                        // if we don't have a number, numHours = 0\n\n                        _numHours = _hasNumber ? _textArray2[1] : 0;\n                        // if we have units, use the units as a mulitplier\n\n                        // plural will be 1 if we are asking for more than 1 of a unit\n\n                        _plural = _numHours == 1 ? 0 : 1;\n\n                        // default unitsInText\n\n                        _unitsInText = _numHours + \" hour\";\n\n\n                        if (_hasUnits) {\n                            _units = _textArray2[2];\n\n\n                            if (_units.includes(\"hour\")) {\n                                // do nothing\n                            } else if (_units.includes(\"day\")) {\n                                // 24 hours in a day\n                                _unitsInText = _numHours + \" day\";\n                                _numHours *= 24;\n                            } else if (_units.includes(\"week\")) {\n                                // 7 days in a week\n                                _unitsInText = _numHours + \" week\";\n                                _numHours *= 24 * 7;\n                            } else if (_units.includes(\"month\")) {\n                                // 4 weeks in (most) months\n                                _unitsInText = _numHours + \" month\";\n                                _numHours *= 24 * 7 * 4;\n                            } else if (_units.includes(\"year\")) {\n                                // 365 days in a year\n                                _unitsInText = _numHours + \" year\";\n                                _numHours *= 24 * 365;\n                            }\n                        }\n                        if (_plural) {\n                            _unitsInText += \"s\";\n                        }\n\n                        if (_numHours == 0) {\n                            botMessage = \"Hearts Received All Time\\n\\n\";\n                            _numHours = new Date().getTime() / (1000 * 3600) - 1;\n                        } else {\n                            botMessage = \"Hearts Received In The Last: \" + _unitsInText + \"\\n\\n\";\n                        }\n\n                        _context.next = 197;\n                        return getMessages(_numHours * 3600);\n\n                    case 197:\n                        _messages2 = _context.sent;\n                        _context.next = 200;\n                        return helpers.callGroupDetails(ACCESS_TOKEN);\n\n                    case 200:\n                        _groupDetails = _context.sent;\n                        _members = _groupDetails.members;\n                        heartCounts = [];\n                        groupTotal = [];\n                        _iteratorNormalCompletion6 = true;\n                        _didIteratorError6 = false;\n                        _iteratorError6 = undefined;\n                        _context.prev = 207;\n                        _iterator6 = _members[Symbol.iterator]();\n\n                    case 209:\n                        if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {\n                            _context.next = 253;\n                            break;\n                        }\n\n                        _member3 = _step6.value;\n                        count = 0;\n                        _iteratorNormalCompletion7 = true;\n                        _didIteratorError7 = false;\n                        _iteratorError7 = undefined;\n                        _context.prev = 215;\n\n                        for (_iterator7 = _messages2[Symbol.iterator](); !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                            _message = _step7.value;\n\n                            if (_member3.user_id == _message.user_id) {\n                                count += _message.favorited_by.length;\n                            }\n                        }\n\n                        _context.next = 223;\n                        break;\n\n                    case 219:\n                        _context.prev = 219;\n                        _context.t5 = _context[\"catch\"](215);\n                        _didIteratorError7 = true;\n                        _iteratorError7 = _context.t5;\n\n                    case 223:\n                        _context.prev = 223;\n                        _context.prev = 224;\n\n                        if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                            _iterator7.return();\n                        }\n\n                    case 226:\n                        _context.prev = 226;\n\n                        if (!_didIteratorError7) {\n                            _context.next = 229;\n                            break;\n                        }\n\n                        throw _iteratorError7;\n\n                    case 229:\n                        return _context.finish(226);\n\n                    case 230:\n                        return _context.finish(223);\n\n                    case 231:\n                        heartCount = _member3.nickname + \": \" + count;\n\n                        heartCounts.push(heartCount);\n\n                        // lets be smart about storing this so we can sort it     \n                        userTotal = {\n                            \"member\": _member3.nickname,\n                            \"count\": count\n                        };\n\n\n                        console.log(userTotal);\n\n                        // add data to groupTotal sorted by total\n\n                        if (!(groupTotal.length == 0)) {\n                            _context.next = 239;\n                            break;\n                        }\n\n                        // if this shit's empty, just push it\n                        groupTotal.push(userTotal);\n                        _context.next = 250;\n                        break;\n\n                    case 239:\n                        _added = false;\n\n                        // else, look through the current groupTotal\n\n                        _i = 0;\n\n                    case 241:\n                        if (!(_i < groupTotal.length)) {\n                            _context.next = 249;\n                            break;\n                        }\n\n                        if (!(groupTotal[_i].count <= userTotal.count)) {\n                            _context.next = 246;\n                            break;\n                        }\n\n                        // splice this new usertotal into the group total\n                        groupTotal.splice(_i, 0, userTotal);\n                        _added = true;\n                        return _context.abrupt(\"break\", 249);\n\n                    case 246:\n                        _i++;\n                        _context.next = 241;\n                        break;\n\n                    case 249:\n                        if (!_added) {\n                            groupTotal.push(userTotal);\n                        }\n\n                    case 250:\n                        _iteratorNormalCompletion6 = true;\n                        _context.next = 209;\n                        break;\n\n                    case 253:\n                        _context.next = 259;\n                        break;\n\n                    case 255:\n                        _context.prev = 255;\n                        _context.t6 = _context[\"catch\"](207);\n                        _didIteratorError6 = true;\n                        _iteratorError6 = _context.t6;\n\n                    case 259:\n                        _context.prev = 259;\n                        _context.prev = 260;\n\n                        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                            _iterator6.return();\n                        }\n\n                    case 262:\n                        _context.prev = 262;\n\n                        if (!_didIteratorError6) {\n                            _context.next = 265;\n                            break;\n                        }\n\n                        throw _iteratorError6;\n\n                    case 265:\n                        return _context.finish(262);\n\n                    case 266:\n                        return _context.finish(259);\n\n                    case 267:\n\n                        groupTotal.forEach(function (item, index, array) {\n                            botMessage += index + 1 + \". \" + item.member + \" : \" + item.count + \"\\n\";\n                        });\n\n                        consoleMessage = \"Bot sent a heart count reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 271:\n                        if (!text.includes(\"/lastseen\")) {\n                            _context.next = 310;\n                            break;\n                        }\n\n                        user_id = req.body.attachments[0].user_ids[0];\n                        last_seen = 0;\n                        _context.next = 276;\n                        return getAllMessages();\n\n                    case 276:\n                        _messages3 = _context.sent;\n\n                        console.log(user_id);\n                        _iteratorNormalCompletion8 = true;\n                        _didIteratorError8 = false;\n                        _iteratorError8 = undefined;\n                        _context.prev = 281;\n                        _iterator8 = _messages3[Symbol.iterator]();\n\n                    case 283:\n                        if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {\n                            _context.next = 291;\n                            break;\n                        }\n\n                        _message2 = _step8.value;\n\n                        if (!(user_id === _message2.user_id)) {\n                            _context.next = 288;\n                            break;\n                        }\n\n                        last_seen = _message2.created_at;\n                        return _context.abrupt(\"break\", 291);\n\n                    case 288:\n                        _iteratorNormalCompletion8 = true;\n                        _context.next = 283;\n                        break;\n\n                    case 291:\n                        _context.next = 297;\n                        break;\n\n                    case 293:\n                        _context.prev = 293;\n                        _context.t7 = _context[\"catch\"](281);\n                        _didIteratorError8 = true;\n                        _iteratorError8 = _context.t7;\n\n                    case 297:\n                        _context.prev = 297;\n                        _context.prev = 298;\n\n                        if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                            _iterator8.return();\n                        }\n\n                    case 300:\n                        _context.prev = 300;\n\n                        if (!_didIteratorError8) {\n                            _context.next = 303;\n                            break;\n                        }\n\n                        throw _iteratorError8;\n\n                    case 303:\n                        return _context.finish(300);\n\n                    case 304:\n                        return _context.finish(297);\n\n                    case 305:\n                        if (last_seen == 0) {\n                            botMessage = user_id + \" hasn't been seen yet.\";\n                        } else {\n                            dateF = new Date(last_seen * 1000);\n\n                            botMessage = dateF.toUTCString();\n                        }\n\n                        console.log(last_seen);\n                        consoleMessage = \"Bot sent a last seen timestamp reply.\";\n\n                        _context.next = 529;\n                        break;\n\n                    case 310:\n                        if (!text.includes(\"/personality\")) {\n                            _context.next = 369;\n                            break;\n                        }\n\n                        console.log(text);\n\n                        sinceHours = text.match(/\\d+$/);\n\n                        console.log(\"sinceHours: \" + sinceHours);\n                        if (!sinceHours) {\n                            sinceHours = 0;\n                        }\n\n                        _context.next = 317;\n                        return getAllMessages();\n\n                    case 317:\n                        _messages4 = _context.sent;\n                        _user_id = req.body.attachments[0].user_ids[0];\n                        dateNow = new Date();\n                        contentItems = [];\n                        _i2 = 0;\n                        username = \"\";\n                        _iteratorNormalCompletion9 = true;\n                        _didIteratorError9 = false;\n                        _iteratorError9 = undefined;\n                        _context.prev = 326;\n                        _iterator9 = _messages4[Symbol.iterator]();\n\n                    case 328:\n                        if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {\n                            _context.next = 345;\n                            break;\n                        }\n\n                        _message3 = _step9.value;\n\n                        if (!(_user_id === _message3.user_id)) {\n                            _context.next = 342;\n                            break;\n                        }\n\n                        username = _message3.name;\n                        dateMsg = new Date(_message3.created_at * 1000);\n                        hourDiff = Math.abs(dateNow - dateMsg) / 36e5;\n\n                        if (!(sinceHours !== 0 && sinceHours < hourDiff)) {\n                            _context.next = 337;\n                            break;\n                        }\n\n                        console.log(\"Loop breaks at \" + _i2 + \" times.\");\n                        return _context.abrupt(\"break\", 345);\n\n                    case 337:\n                        if (_message3.text) {\n                            _context.next = 340;\n                            break;\n                        }\n\n                        console.log(\"Empty text.\");\n                        return _context.abrupt(\"continue\", 342);\n\n                    case 340:\n\n                        contentItems.push({\n                            \"content\": _message3.text,\n                            \"contenttype\": \"text/plain\",\n                            \"created\": _message3.created_at,\n                            \"id\": _message3.id,\n                            \"language\": \"en\"\n                        });\n                        _i2++;\n\n                    case 342:\n                        _iteratorNormalCompletion9 = true;\n                        _context.next = 328;\n                        break;\n\n                    case 345:\n                        _context.next = 351;\n                        break;\n\n                    case 347:\n                        _context.prev = 347;\n                        _context.t8 = _context[\"catch\"](326);\n                        _didIteratorError9 = true;\n                        _iteratorError9 = _context.t8;\n\n                    case 351:\n                        _context.prev = 351;\n                        _context.prev = 352;\n\n                        if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                            _iterator9.return();\n                        }\n\n                    case 354:\n                        _context.prev = 354;\n\n                        if (!_didIteratorError9) {\n                            _context.next = 357;\n                            break;\n                        }\n\n                        throw _iteratorError9;\n\n                    case 357:\n                        return _context.finish(354);\n\n                    case 358:\n                        return _context.finish(351);\n\n                    case 359:\n                        _context.next = 361;\n                        return PersonalityInsights.getPersonalityInsights(contentItems);\n\n                    case 361:\n                        personalityInsights = _context.sent;\n\n                        console.log(\"Personality response length: \" + personalityInsights.personality.length);\n                        botMessage = username + \" has been \";\n                        if (sinceHours > 0) {\n                            botMessage += personalityInsights.personality[0].name.toLowerCase() + \" over the past \" + sinceHours.toString() + \" hours\";\n                        } else {\n                            _id = Math.round(Math.random() * (personalityInsights.personality.length - 1));\n\n                            botMessage += personalityInsights.personality[_id].name.toLowerCase();\n                        }\n\n                        botMessage += \".\";\n                        consoleMessage = \"Bot sent a Personality Insights reply.\";\n                        _context.next = 529;\n                        break;\n\n                    case 369:\n                        if (!text.includes(\"/stats\")) {\n                            _context.next = 529;\n                            break;\n                        }\n\n                        // this whole thing needs checks to make sure the syntax is:\n                        // syntax:   /stats number units\n                        // example:  /stats 5 days\n\n                        // pop the command into an array\n                        _textArray3 = text.split(\" \");\n                        // if length is greater than 1 we have a number\n\n                        _hasNumber2 = _textArray3.length > 1;\n                        // if length is greater than 2 we have units\n\n                        _hasUnits2 = _textArray3.length > 2;\n\n                        // if we don't have a number, numHours = 0\n\n                        _numHours2 = _hasNumber2 ? _textArray3[1] : 0;\n                        // if we have units, use the units as a mulitplier\n\n                        // plural will be 1 if we are asking for more than 1 of a unit\n\n                        _plural2 = _numHours2 == 1 ? 0 : 1;\n\n                        // default unitsInText\n\n                        _unitsInText2 = _numHours2 + \" hour\";\n\n\n                        if (_hasUnits2) {\n                            _units2 = _textArray3[2];\n\n\n                            if (_units2.includes(\"hour\")) {\n                                // do nothing\n                            } else if (_units2.includes(\"day\")) {\n                                // 24 hours in a day\n                                _unitsInText2 = _numHours2 + \" day\";\n                                _numHours2 *= 24;\n                            } else if (_units2.includes(\"week\")) {\n                                // 7 days in a week\n                                _unitsInText2 = _numHours2 + \" week\";\n                                _numHours2 *= 24 * 7;\n                            } else if (_units2.includes(\"month\")) {\n                                // 4 weeks in (most) months\n                                _unitsInText2 = _numHours2 + \" month\";\n                                _numHours2 *= 24 * 7 * 4;\n                            } else if (_units2.includes(\"year\")) {\n                                // 365 days in a year\n                                _unitsInText2 = _numHours2 + \" year\";\n                                _numHours2 *= 24 * 365;\n                            }\n                        }\n                        if (_plural2) {\n                            _unitsInText2 += \"s\";\n                        }\n\n                        if (_numHours2 == 0) {\n                            botMessage = \"Stats All Time\\n\\n\";\n                            _numHours2 = new Date().getTime() / (1000 * 3600) - 1;\n                        } else {\n                            botMessage = \"Stats In The Last: \" + _unitsInText2 + \"\\n\\n\";\n                        }\n\n                        _context.next = 381;\n                        return getMessages(_numHours2 * 3600);\n\n                    case 381:\n                        _messages5 = _context.sent;\n                        _context.next = 384;\n                        return helpers.callGroupDetails(ACCESS_TOKEN);\n\n                    case 384:\n                        _groupDetails2 = _context.sent;\n                        _members2 = _groupDetails2.members;\n\n\n                        console.log(_members2);\n\n                        _stats = {};\n                        _iteratorNormalCompletion10 = true;\n                        _didIteratorError10 = false;\n                        _iteratorError10 = undefined;\n                        _context.prev = 391;\n                        _iterator10 = _members2[Symbol.iterator]();\n\n                    case 393:\n                        if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {\n                            _context.next = 423;\n                            break;\n                        }\n\n                        memberA = _step10.value;\n\n                        _stats[memberA.user_id] = {};\n                        _stats[memberA.user_id].nickname = memberA.nickname;\n                        _stats[memberA.user_id].user_id = memberA.user_id;\n                        _stats[memberA.user_id].hearts_from = {};\n                        _stats[memberA.user_id].hearts_total = 0;\n                        _stats[memberA.user_id].messages_total = 0;\n                        _iteratorNormalCompletion13 = true;\n                        _didIteratorError13 = false;\n                        _iteratorError13 = undefined;\n                        _context.prev = 404;\n                        for (_iterator13 = _members2[Symbol.iterator](); !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                            memberB = _step13.value;\n\n                            _stats[memberA.user_id].hearts_from[memberB.user_id] = 0;\n                        }\n                        _context.next = 412;\n                        break;\n\n                    case 408:\n                        _context.prev = 408;\n                        _context.t9 = _context[\"catch\"](404);\n                        _didIteratorError13 = true;\n                        _iteratorError13 = _context.t9;\n\n                    case 412:\n                        _context.prev = 412;\n                        _context.prev = 413;\n\n                        if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                            _iterator13.return();\n                        }\n\n                    case 415:\n                        _context.prev = 415;\n\n                        if (!_didIteratorError13) {\n                            _context.next = 418;\n                            break;\n                        }\n\n                        throw _iteratorError13;\n\n                    case 418:\n                        return _context.finish(415);\n\n                    case 419:\n                        return _context.finish(412);\n\n                    case 420:\n                        _iteratorNormalCompletion10 = true;\n                        _context.next = 393;\n                        break;\n\n                    case 423:\n                        _context.next = 429;\n                        break;\n\n                    case 425:\n                        _context.prev = 425;\n                        _context.t10 = _context[\"catch\"](391);\n                        _didIteratorError10 = true;\n                        _iteratorError10 = _context.t10;\n\n                    case 429:\n                        _context.prev = 429;\n                        _context.prev = 430;\n\n                        if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                            _iterator10.return();\n                        }\n\n                    case 432:\n                        _context.prev = 432;\n\n                        if (!_didIteratorError10) {\n                            _context.next = 435;\n                            break;\n                        }\n\n                        throw _iteratorError10;\n\n                    case 435:\n                        return _context.finish(432);\n\n                    case 436:\n                        return _context.finish(429);\n\n                    case 437:\n                        _iteratorNormalCompletion11 = true;\n                        _didIteratorError11 = false;\n                        _iteratorError11 = undefined;\n                        _context.prev = 440;\n                        _iterator11 = _messages5[Symbol.iterator]();\n\n                    case 442:\n                        if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {\n                            _context.next = 468;\n                            break;\n                        }\n\n                        _message4 = _step11.value;\n\n                        if (!(_message4.sender_type == 'user')) {\n                            _context.next = 465;\n                            break;\n                        }\n\n                        _stats[_message4.user_id].messages_total++;\n                        _iteratorNormalCompletion14 = true;\n                        _didIteratorError14 = false;\n                        _iteratorError14 = undefined;\n                        _context.prev = 449;\n                        for (_iterator14 = _message4.favorited_by[Symbol.iterator](); !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                            heart = _step14.value;\n\n                            _stats[_message4.user_id].hearts_from[heart]++;\n                            _stats[_message4.user_id].hearts_total++;\n                        }\n                        _context.next = 457;\n                        break;\n\n                    case 453:\n                        _context.prev = 453;\n                        _context.t11 = _context[\"catch\"](449);\n                        _didIteratorError14 = true;\n                        _iteratorError14 = _context.t11;\n\n                    case 457:\n                        _context.prev = 457;\n                        _context.prev = 458;\n\n                        if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                            _iterator14.return();\n                        }\n\n                    case 460:\n                        _context.prev = 460;\n\n                        if (!_didIteratorError14) {\n                            _context.next = 463;\n                            break;\n                        }\n\n                        throw _iteratorError14;\n\n                    case 463:\n                        return _context.finish(460);\n\n                    case 464:\n                        return _context.finish(457);\n\n                    case 465:\n                        _iteratorNormalCompletion11 = true;\n                        _context.next = 442;\n                        break;\n\n                    case 468:\n                        _context.next = 474;\n                        break;\n\n                    case 470:\n                        _context.prev = 470;\n                        _context.t12 = _context[\"catch\"](440);\n                        _didIteratorError11 = true;\n                        _iteratorError11 = _context.t12;\n\n                    case 474:\n                        _context.prev = 474;\n                        _context.prev = 475;\n\n                        if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                            _iterator11.return();\n                        }\n\n                    case 477:\n                        _context.prev = 477;\n\n                        if (!_didIteratorError11) {\n                            _context.next = 480;\n                            break;\n                        }\n\n                        throw _iteratorError11;\n\n                    case 480:\n                        return _context.finish(477);\n\n                    case 481:\n                        return _context.finish(474);\n\n                    case 482:\n                        _iteratorNormalCompletion12 = true;\n                        _didIteratorError12 = false;\n                        _iteratorError12 = undefined;\n                        _context.prev = 485;\n                        _iterator12 = _members2[Symbol.iterator]();\n\n                    case 487:\n                        if (_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done) {\n                            _context.next = 515;\n                            break;\n                        }\n\n                        _memberA = _step12.value;\n                        _stat = _stats[_memberA.user_id];\n\n                        botMessage += \"\\\"\" + _memberA.nickname + \"\\\" received: \" + _stats[_memberA.user_id].hearts_total + \" hearts over \" + _stats[_memberA.user_id].messages_total + \" message(s) ... \";\n                        if (_stats[_memberA.user_id].messages_total != 0) {\n                            botMessage += (_stats[_memberA.user_id].hearts_total / _stats[_memberA.user_id].messages_total).toFixed(2) + \" HPM\\n\";\n                        } else {\n                            botMessage += \"\\n\";\n                        }\n                        _iteratorNormalCompletion15 = true;\n                        _didIteratorError15 = false;\n                        _iteratorError15 = undefined;\n                        _context.prev = 495;\n                        for (_iterator15 = _members2[Symbol.iterator](); !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                            _memberB = _step15.value;\n\n                            botMessage += \"-\" + _memberB.nickname + \": \" + _stats[_memberA.user_id].hearts_from[_memberB.user_id] + \"\\n\";\n                        }\n                        _context.next = 503;\n                        break;\n\n                    case 499:\n                        _context.prev = 499;\n                        _context.t13 = _context[\"catch\"](495);\n                        _didIteratorError15 = true;\n                        _iteratorError15 = _context.t13;\n\n                    case 503:\n                        _context.prev = 503;\n                        _context.prev = 504;\n\n                        if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                            _iterator15.return();\n                        }\n\n                    case 506:\n                        _context.prev = 506;\n\n                        if (!_didIteratorError15) {\n                            _context.next = 509;\n                            break;\n                        }\n\n                        throw _iteratorError15;\n\n                    case 509:\n                        return _context.finish(506);\n\n                    case 510:\n                        return _context.finish(503);\n\n                    case 511:\n                        botMessage += \"\\n\";\n\n                    case 512:\n                        _iteratorNormalCompletion12 = true;\n                        _context.next = 487;\n                        break;\n\n                    case 515:\n                        _context.next = 521;\n                        break;\n\n                    case 517:\n                        _context.prev = 517;\n                        _context.t14 = _context[\"catch\"](485);\n                        _didIteratorError12 = true;\n                        _iteratorError12 = _context.t14;\n\n                    case 521:\n                        _context.prev = 521;\n                        _context.prev = 522;\n\n                        if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                            _iterator12.return();\n                        }\n\n                    case 524:\n                        _context.prev = 524;\n\n                        if (!_didIteratorError12) {\n                            _context.next = 527;\n                            break;\n                        }\n\n                        throw _iteratorError12;\n\n                    case 527:\n                        return _context.finish(524);\n\n                    case 528:\n                        return _context.finish(521);\n\n                    case 529:\n\n                        if (botMessage) {\n                            opts = {\n                                picture_url: \"\"\n                            };\n\n                            API.Bots.post(ACCESS_TOKEN, BOT_ID, botMessage, opts, function (err, ret) {\n                                if (!err) {\n                                    console.log(botMessage);\n                                    console.log(consoleMessage);\n                                }\n                            });\n                        }\n\n                    case 530:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }\n        }, _callee, this, [[61, 65, 69, 77], [70,, 72, 76], [81, 109, 113, 121], [88, 92, 96, 104], [97,, 99, 103], [114,, 116, 120], [125, 149, 153, 161], [154,, 156, 160], [164, 168, 172, 180], [173,, 175, 179], [207, 255, 259, 267], [215, 219, 223, 231], [224,, 226, 230], [260,, 262, 266], [281, 293, 297, 305], [298,, 300, 304], [326, 347, 351, 359], [352,, 354, 358], [391, 425, 429, 437], [404, 408, 412, 420], [413,, 415, 419], [430,, 432, 436], [440, 470, 474, 482], [449, 453, 457, 465], [458,, 460, 464], [475,, 477, 481], [485, 517, 521, 529], [495, 499, 503, 511], [504,, 506, 510], [522,, 524, 528]]);\n    }));\n\n    return function postBotMessage(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\n\nvar getAllMessages = exports.getAllMessages = function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {\n        var messages, limit, messageTemp, messageCount, beforeId, i;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n                switch (_context2.prev = _context2.next) {\n                    case 0:\n                        messages = [];\n                        limit = 100;\n\n                        console.log(\"Get messages.\");\n                        _context2.next = 5;\n                        return helpers.callGetMessages({\n                            group_id: GROUP_ID,\n                            token: ACCESS_TOKEN,\n                            before_id: 0\n                        });\n\n                    case 5:\n                        messageTemp = _context2.sent;\n                        messageCount = messageTemp.count;\n\n                        messages = messageTemp.messages;\n\n                        console.log(messageTemp.count);\n                        console.log(messageTemp.messages.length);\n\n                        if (!(messageCount > limit)) {\n                            _context2.next = 25;\n                            break;\n                        }\n\n                        beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n                        i = limit;\n\n                    case 13:\n                        if (!(i < messageCount)) {\n                            _context2.next = 25;\n                            break;\n                        }\n\n                        console.log(\"Before ID: \" + beforeId + \" Count: \" + i);\n\n                        if (!(i >= limit)) {\n                            _context2.next = 22;\n                            break;\n                        }\n\n                        _context2.next = 18;\n                        return helpers.callGetMessages({\n                            group_id: GROUP_ID,\n                            token: ACCESS_TOKEN,\n                            before_id: beforeId\n                        });\n\n                    case 18:\n                        messageTemp = _context2.sent;\n\n                        console.log(\"Next message count: \" + messageTemp.count + \" -- \" + messageTemp.messages.length);\n                        beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n                        Array.prototype.push.apply(messages, messageTemp.messages);\n\n                    case 22:\n                        i += limit;\n                        _context2.next = 13;\n                        break;\n\n                    case 25:\n                        console.log(\"Get messages done.\");\n                        console.log(\"Total messages: \" + messages.length);\n                        return _context2.abrupt(\"return\", messages);\n\n                    case 28:\n                    case \"end\":\n                        return _context2.stop();\n                }\n            }\n        }, _callee2, this);\n    }));\n\n    return function getAllMessages() {\n        return _ref2.apply(this, arguments);\n    };\n}();\n\nvar countWords = exports.countWords = function countWords(messages) {\n    var totalWords = 0;\n    var _iteratorNormalCompletion16 = true;\n    var _didIteratorError16 = false;\n    var _iteratorError16 = undefined;\n\n    try {\n        for (var _iterator16 = messages[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var message = _step16.value;\n\n            if (\"bot\" === message.sender_type) {\n                // Ignore bot messages\n                continue;\n            }\n\n            var text = message.text;\n            if (isEmpty(text)) {\n                continue;\n            }\n            totalWords += text.trim().split(/\\s+/).length;\n        }\n    } catch (err) {\n        _didIteratorError16 = true;\n        _iteratorError16 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                _iterator16.return();\n            }\n        } finally {\n            if (_didIteratorError16) {\n                throw _iteratorError16;\n            }\n        }\n    }\n\n    return totalWords;\n};\n\nvar groupMeWordCount = exports.groupMeWordCount = function groupMeWordCount(messages, word) {\n    var wordsCount = 0;\n    var _iteratorNormalCompletion17 = true;\n    var _didIteratorError17 = false;\n    var _iteratorError17 = undefined;\n\n    try {\n        for (var _iterator17 = messages[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n            var message = _step17.value;\n\n\n            if (\"bot\" === message.sender_type) {\n                // Ignore bot messages\n                continue;\n            }\n\n            var text = message.text;\n            if (isEmpty(text)) {\n                continue;\n            }\n            if (text.includes(word)) {\n                wordsCount++;\n            }\n        }\n    } catch (err) {\n        _didIteratorError17 = true;\n        _iteratorError17 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                _iterator17.return();\n            }\n        } finally {\n            if (_didIteratorError17) {\n                throw _iteratorError17;\n            }\n        }\n    }\n\n    return wordsCount;\n};\n\nvar isEmpty = exports.isEmpty = function isEmpty(str) {\n    return !str || 0 === str.length;\n};\n\nvar getMessages = exports.getMessages = function () {\n    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(seconds) {\n        var messages, seekTime, searchComplete, beforeId, limit, totalMessageCount, data, i;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n                switch (_context3.prev = _context3.next) {\n                    case 0:\n                        console.log(\"Getting \" + seconds + \" seconds worth of messages.\");\n\n                        // array to hold the messages we return\n                        messages = [];\n                        // getTime returns milli seconds since epoch, divide by 1k to conver to seconds and subtract how many seconds we care about\n\n                        seekTime = new Date().getTime() / 1000 - seconds;\n                        searchComplete = false;\n                        beforeId = 0;\n                        limit = 100;\n                        totalMessageCount = 0;\n\n                    case 7:\n                        _context3.next = 9;\n                        return helpers.getMessageWrapper({\n                            group_id: GROUP_ID,\n                            token: ACCESS_TOKEN,\n                            before_id: beforeId,\n                            limit: limit\n                        });\n\n                    case 9:\n                        data = _context3.sent;\n\n\n                        // set our request limit to the number of messages remaining\n                        limit = data.count - messages.length;\n                        totalMessageCount = data.count;\n\n                        // if limit is greater than 100, default to 100\n                        limit = limit > 100 ? 100 : limit;\n\n                        // if limit is less than 100, set to 0.. who knows why.\n                        limit = limit < 100 ? 0 : limit;\n\n                        // loop through the chunk\n                        i = 0;\n\n                    case 15:\n                        if (!(i < data.messages.length)) {\n                            _context3.next = 25;\n                            break;\n                        }\n\n                        if (!(data.messages[i].created_at > seekTime)) {\n                            _context3.next = 20;\n                            break;\n                        }\n\n                        // add it to our messages array\n                        messages.push(data.messages[i]);\n                        _context3.next = 22;\n                        break;\n\n                    case 20:\n                        // search is complete! set some flag and gtfo\n                        searchComplete = true;\n                        return _context3.abrupt(\"break\", 25);\n\n                    case 22:\n                        i++;\n                        _context3.next = 15;\n                        break;\n\n                    case 25:\n\n                        // reassign the before id for the next chunk request\n                        beforeId = data.messages[data.messages.length - 1].id;\n\n                    case 26:\n                        if (searchComplete == false && limit > 0) {\n                            _context3.next = 7;\n                            break;\n                        }\n\n                    case 27:\n\n                        console.log(\"Received \" + messages.length + \" of \" + totalMessageCount + \" messages.\");\n                        return _context3.abrupt(\"return\", messages);\n\n                    case 29:\n                    case \"end\":\n                        return _context3.stop();\n                }\n            }\n        }, _callee3, this);\n    }));\n\n    return function getMessages(_x2) {\n        return _ref3.apply(this, arguments);\n    };\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "GroupMeUtils.js"
      ],
      "names": [
        "helpers",
        "PersonalityInsights",
        "config",
        "ACCESS_TOKEN",
        "process",
        "env",
        "BOT_ID",
        "GROUP_ID",
        "API",
        "require",
        "Stateless",
        "postBotMessage",
        "req",
        "console",
        "log",
        "body",
        "consoleMessage",
        "botMessage",
        "sender_type",
        "text",
        "isEmpty",
        "trim",
        "toLowerCase",
        "includes",
        "randomText",
        "id",
        "Math",
        "round",
        "random",
        "length",
        "textArray",
        "split",
        "getAllMessages",
        "messages",
        "word",
        "groupMeWordCount",
        "wordCount",
        "toString",
        "countWords",
        "totalWords",
        "hasNumber",
        "hasUnits",
        "numHours",
        "plural",
        "unitsInText",
        "units",
        "Date",
        "getTime",
        "getMessages",
        "callGroupDetails",
        "groupDetails",
        "members",
        "member",
        "message_count",
        "totalHumanMessages",
        "message",
        "user_id",
        "stats",
        "push",
        "added",
        "i",
        "splice",
        "stat",
        "nickname",
        "toFixed",
        "botCount",
        "heartCounts",
        "groupTotal",
        "count",
        "favorited_by",
        "heartCount",
        "userTotal",
        "forEach",
        "item",
        "index",
        "array",
        "attachments",
        "user_ids",
        "last_seen",
        "created_at",
        "dateF",
        "toUTCString",
        "sinceHours",
        "match",
        "dateNow",
        "contentItems",
        "username",
        "name",
        "dateMsg",
        "hourDiff",
        "abs",
        "getPersonalityInsights",
        "personalityInsights",
        "personality",
        "memberA",
        "hearts_from",
        "hearts_total",
        "messages_total",
        "memberB",
        "heart",
        "opts",
        "picture_url",
        "Bots",
        "post",
        "err",
        "ret",
        "limit",
        "callGetMessages",
        "group_id",
        "token",
        "before_id",
        "messageTemp",
        "messageCount",
        "beforeId",
        "Array",
        "prototype",
        "apply",
        "wordsCount",
        "str",
        "seconds",
        "seekTime",
        "searchComplete",
        "totalMessageCount",
        "getMessageWrapper",
        "data"
      ],
      "mappings": "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",
      "file": "GroupMeUtils.js",
      "sourceRoot": "/app/data",
      "sourcesContent": [
        "import * as helpers from \"./helpers\";\nimport * as PersonalityInsights from \"./PersonalityInsights\";\nimport dotenvConfig from 'dotenv';\n\ndotenvConfig.config();\n\nconst ACCESS_TOKEN = process.env.ACCESS_TOKEN;\nconst BOT_ID = process.env.BOT_ID;\nconst GROUP_ID = process.env.GROUP_ID;\nconst API = require('groupme').Stateless;\n\n\n// when we receive a message\nexport const postBotMessage = async function(req) {\n    console.log(\"Request Payload\");\n    console.log(req.body);\n    let consoleMessage = \"\";\n    let botMessage = \"\";\n    let sender_type = req.body.sender_type;\n    let text = isEmpty(req.body.text) ? req.body.text : req.body.text.trim();\n\n    // if from a bot, ignore it\n    if (sender_type === \"bot\") {\n        console.log(\"No action..\");\n\n        // else if it's from a user\n    } else if (sender_type === \"user\") {\n        // convert all text to lowercase for easier parsing\n        text = text.toLowerCase();\n\n        if (['hi', 'hello'].includes(text)) {\n            // library of responses to the above 'if'\n            let randomText = [\n                'Hi, I am the ArmBot',\n                'Hello you bitch, you!',\n                'Seh-hent', 'Oooooop!',\n                'My shoes are ruined!',\n                'I was caught in a starm',\n                'Hello, Rouis.',\n                'We are all Blue Henns!',\n                'Smells like my asshole bro..',\n                'Uhhghh!! Can I get my face backkk?!'\n            ];\n            // pick a random index and spit it back\n            let id = Math.round(Math.random() * (randomText.length - 1));\n            botMessage = randomText[id];\n            consoleMessage = \"Bot sent hi reply.\";\n\n        } else if (text.includes(\"/wordcount\")) {\n            let textArray = text.split(\" \");\n            let messages = await getAllMessages();\n\n            console.log(\"Command length: \" + textArray.length);\n            if (textArray.length > 1) {\n                let word = textArray[1];\n                console.log(\"Count word instances: \" + word);\n                let wordCount = await groupMeWordCount(messages, word);\n                botMessage = \"\\\"\" + word + \"\\\" was said \" + wordCount.toString() + \" times\";\n            } else {\n                let totalWords = await countWords(messages);\n                botMessage = \"Total words of all time: \" + totalWords;\n            }\n            consoleMessage = \"Bot sent a word count reply.\";\n\n        } else if (text.includes(\"/messages\")) {\n            // this whole thing needs checks to make sure the syntax is:\n            // syntax:   /hearts number units\n            // example:  /hearts 5 days\n\n            // pop the command into an array\n            let textArray = text.split(\" \");\n            // if length is greater than 1 we have a number\n            let hasNumber = textArray.length > 1;\n            // if length is greater than 2 we have units\n            let hasUnits = textArray.length > 2;\n\n            // if we don't have a number, numHours = 0\n            let numHours = hasNumber ? textArray[1] : 0;\n            // if we have units, use the units as a mulitplier\n\n            // plural will be 1 if we are asking for more than 1 of a unit\n            let plural = numHours == 1 ? 0 : 1;\n\n            // default unitsInText\n            let unitsInText =  numHours + \" hour\";\n\n            if (hasUnits) {\n                let units = textArray[2];\n\n                if (units.includes(\"hour\")) {\n                    // do nothing\n                }\n                else if (units.includes(\"day\")) {\n                    // 24 hours in a day\n                    unitsInText = numHours + \" day\";\n                    numHours *= 24;\n                }\n                else if  (units.includes(\"week\")) {\n                    // 7 days in a week\n                    unitsInText = numHours + \" week\";\n                    numHours *= 24 * 7;\n                }\n                else if  (units.includes(\"month\")) {\n                    // 4 weeks in (most) months\n                    unitsInText = numHours + \" month\";\n                    numHours *= 24 * 7 * 4;\n                }\n                else if  (units.includes(\"year\")) {\n                    // 365 days in a year\n                    unitsInText = numHours + \" year\";\n                    numHours *= 24 * 365;\n                }\n\n            }\n            if (plural) {\n                unitsInText += \"s\";\n            }\n\n            // if no time entered, modify to ask for ALL TIME\n            if( numHours === 0 ){\n                numHours = new Date().getTime()/(1000*3600)-1;\n                botMessage = \"Messages Sent All Time\\n\\n\";\n            } else {\n                botMessage = \"Messages Sent In The Last: \" + unitsInText + \"\\n\\n\";\n            }\n          \n            // request the messages from N seconds ago till now\n            let messages = await getMessages( numHours * 3600 );\n            let groupDetails = await helpers.callGroupDetails(ACCESS_TOKEN);\n            let members = groupDetails.members;\n          \n            // create a 'message count' field for each member\n            for(let member of members){\n              member.message_count = 0;\n            }\n\n            // loop through all the messages and increment the users messages count\n            let totalHumanMessages = 0;\n            for (let message of messages) {\n              for( let member of members ){\n                if(member.user_id == message.user_id){\n                  totalHumanMessages++;\n                  member.message_count++;\n                }\n              }            \n            }\n\n          // sort these stats\n            let stats = []\n            for( let member of members){\n              \n                if( stats.length == 0 ){\n                  // if this shit's empty, just push it\n                  stats.push(member);\n                }else{\n                  let added = false;\n                  \n                  // else, look through the current groupTotal\n                  for(let i =0; i< stats.length; i++){\n\n                    // if the userTotal at this index is less than the one we are trying to add\n                    if( stats[i].message_count <= member.message_count ){\n                      // splice this new usertotal into the group total\n                      stats.splice(i, 0, member );\n                      added = true;\n                      break;\n                    }\n                  }\n                  if(!added){\n                    stats.push(member);\n                  }\n                }\n              \n            }\n         \n            for(let stat of stats ){\n              botMessage += stat.nickname + \": \" + stat.message_count + \" messages (\" + (100*(stat.message_count/messages.length)).toFixed(2)+\"%)\\n\"\n            }\n          \n            let botCount = messages.length - totalHumanMessages;\n            botMessage += \"ArmBot: \" + botCount + \" messages (\" + (100*(botCount/messages.length)).toFixed(2)+ \"%)\\n\";\n            botMessage += \"\\nTotal Messages: \" + messages.length;\n                    \n        } else if (text.includes(\"/hearts\")) {\n            // this whole thing needs checks to make sure the syntax is:\n            // syntax:   /hearts number units\n            // example:  /hearts 5 days\n\n            // pop the command into an array\n            let textArray = text.split(\" \");\n            // if length is greater than 1 we have a number\n            let hasNumber = textArray.length > 1;\n            // if length is greater than 2 we have units\n            let hasUnits = textArray.length > 2;\n\n            // if we don't have a number, numHours = 0\n            let numHours = hasNumber ? textArray[1] : 0;\n            // if we have units, use the units as a mulitplier\n\n            // plural will be 1 if we are asking for more than 1 of a unit\n            let plural = numHours == 1 ? 0 : 1;\n\n            // default unitsInText\n            let unitsInText =  numHours + \" hour\";\n\n            if (hasUnits) {\n                let units = textArray[2];\n\n                if (units.includes(\"hour\")) {\n                    // do nothing\n                }\n                else if (units.includes(\"day\")) {\n                    // 24 hours in a day\n                    unitsInText = numHours + \" day\";\n                    numHours *= 24;\n                }\n                else if  (units.includes(\"week\")) {\n                    // 7 days in a week\n                    unitsInText = numHours + \" week\";\n                    numHours *= 24 * 7;\n                }\n                else if  (units.includes(\"month\")) {\n                    // 4 weeks in (most) months\n                    unitsInText = numHours + \" month\";\n                    numHours *= 24 * 7 * 4\n                }\n                else if  (units.includes(\"year\")) {\n                    // 365 days in a year\n                    unitsInText = numHours + \" year\";\n                    numHours *= 24 * 365;\n                }\n\n            }\n            if (plural) {\n                unitsInText += \"s\";\n            }\n            \n            if (numHours == 0) {\n                botMessage = \"Hearts Received All Time\\n\\n\";\n                numHours = new Date().getTime()/(1000*3600)-1;\n            } else {\n                botMessage = \"Hearts Received In The Last: \" + unitsInText + \"\\n\\n\";\n            }\n          \n            let messages = await getMessages( numHours * 3600 );\n            let groupDetails = await helpers.callGroupDetails(ACCESS_TOKEN);\n            let members = groupDetails.members;\n            let heartCounts = [];\n            let groupTotal = [];\n\n            for (let member of members) {\n                let count = 0;\n                for (let message of messages) {\n                    if (member.user_id == message.user_id) {\n                        count += message.favorited_by.length;\n                    }\n                }\n\n                let heartCount = member.nickname + \": \" + count;\n                heartCounts.push(heartCount);\n\n                // lets be smart about storing this so we can sort it     \n                let userTotal={\n                  \"member\": member.nickname,\n                  \"count\": count\n                }\n                \n                console.log(userTotal);\n                \n                // add data to groupTotal sorted by total\n                if( groupTotal.length == 0 ){\n                  // if this shit's empty, just push it\n                  groupTotal.push(userTotal);\n                }else{\n                  let added = false;\n                  \n                  // else, look through the current groupTotal\n                  for(let i =0; i< groupTotal.length; i++){\n\n                    // if the userTotal at this index is less than the one we are trying to add\n                    if( groupTotal[i].count <= userTotal.count ){\n                      // splice this new usertotal into the group total\n                      groupTotal.splice(i, 0, userTotal );\n                      added = true;\n                      break;\n                    }\n                  }\n                  if(!added){\n                    groupTotal.push(userTotal);\n                  }\n                }\n            }\n\n            groupTotal.forEach(function(item,index,array){\n                  botMessage += (index+1) + \". \" + item.member + \" : \" + item.count + \"\\n\";\n            });\n          \n            consoleMessage = \"Bot sent a heart count reply.\";\n\n        } else if (text.includes(\"/lastseen\")) {\n            let user_id = req.body.attachments[0].user_ids[0];\n            let last_seen = 0;\n            let messages = await getAllMessages();\n            console.log(user_id);\n            for (let message of messages) {\n                if (user_id === message.user_id) {\n                    last_seen = message.created_at;\n                    break;\n                }\n            }\n            if (last_seen == 0) {\n                botMessage = user_id + \" hasn't been seen yet.\"\n            } else {\n                let dateF = new Date(last_seen * 1000);\n                botMessage = dateF.toUTCString();\n            }\n\n            console.log(last_seen);\n            consoleMessage = \"Bot sent a last seen timestamp reply.\";\n\n        } else if (text.includes(\"/personality\")) {\n            console.log(text);\n\n            let sinceHours = text.match(/\\d+$/);\n            console.log(\"sinceHours: \" + sinceHours);\n            if (!sinceHours) {\n                sinceHours = 0;\n            }\n\n            let messages = await getAllMessages();\n            let user_id = req.body.attachments[0].user_ids[0];\n            let dateNow = new Date();\n            let contentItems = [];\n            let i = 0;\n            let username = \"\";\n            for (let message of messages) {\n                if (user_id === message.user_id) {\n                    username = message.name;\n                    let dateMsg = new Date(message.created_at * 1000);\n                    let hourDiff = Math.abs(dateNow - dateMsg) / 36e5;\n\n                    if (sinceHours !== 0 && sinceHours < hourDiff) {\n                        console.log(\"Loop breaks at \" + i + \" times.\");\n                        break;\n                    }\n\n                    if (!message.text) {\n                        console.log(\"Empty text.\");\n                        continue;\n                    }\n\n                    contentItems.push({\n                        \"content\": message.text,\n                        \"contenttype\": \"text/plain\",\n                        \"created\": message.created_at,\n                        \"id\": message.id,\n                        \"language\": \"en\"\n                    });\n                    i++;\n                }\n            }\n\n            let personalityInsights = await PersonalityInsights.getPersonalityInsights(contentItems);\n            console.log(\"Personality response length: \" + personalityInsights.personality.length);\n            botMessage = username + \" has been \";\n            if (sinceHours > 0) {\n                botMessage += personalityInsights.personality[0].name.toLowerCase() + \" over the past \" + sinceHours.toString() + \" hours\";\n            } else {\n                let id = Math.round(Math.random() * (personalityInsights.personality.length - 1));\n                botMessage += personalityInsights.personality[id].name.toLowerCase();\n            }\n\n            botMessage += \".\";\n            consoleMessage = \"Bot sent a Personality Insights reply.\";\n        }else if(text.includes(\"/stats\")){\n            // this whole thing needs checks to make sure the syntax is:\n            // syntax:   /stats number units\n            // example:  /stats 5 days\n\n            // pop the command into an array\n            let textArray = text.split(\" \");\n            // if length is greater than 1 we have a number\n            let hasNumber = textArray.length > 1;\n            // if length is greater than 2 we have units\n            let hasUnits = textArray.length > 2;\n\n            // if we don't have a number, numHours = 0\n            let numHours = hasNumber ? textArray[1] : 0;\n            // if we have units, use the units as a mulitplier\n\n            // plural will be 1 if we are asking for more than 1 of a unit\n            let plural = numHours == 1 ? 0 : 1;\n\n            // default unitsInText\n            let unitsInText =  numHours + \" hour\";\n\n            if (hasUnits) {\n                let units = textArray[2];\n\n                if (units.includes(\"hour\")) {\n                    // do nothing\n                }\n                else if (units.includes(\"day\")) {\n                    // 24 hours in a day\n                    unitsInText = numHours + \" day\";\n                    numHours *= 24;\n                }\n                else if  (units.includes(\"week\")) {\n                    // 7 days in a week\n                    unitsInText = numHours + \" week\";\n                    numHours *= 24 * 7;\n                }\n                else if  (units.includes(\"month\")) {\n                    // 4 weeks in (most) months\n                    unitsInText = numHours + \" month\";\n                    numHours *= 24 * 7 * 4\n                }\n                else if  (units.includes(\"year\")) {\n                    // 365 days in a year\n                    unitsInText = numHours + \" year\";\n                    numHours *= 24 * 365;\n                }\n\n            }\n            if (plural) {\n                unitsInText += \"s\";\n            }\n            \n            if (numHours == 0) {\n                botMessage = \"Stats All Time\\n\\n\";\n                numHours = new Date().getTime()/(1000*3600)-1;\n            } else {\n                botMessage = \"Stats In The Last: \" + unitsInText + \"\\n\\n\";\n            }\n\n          let messages = await getMessages(numHours *3600);\n          let groupDetails = await helpers.callGroupDetails(ACCESS_TOKEN);\n          let members = groupDetails.members;\n\n          console.log(members);\n          \n          let stats = {};\n          for( let memberA of members){\n            stats[memberA.user_id] = {};\n            stats[memberA.user_id].nickname = memberA.nickname;\n            stats[memberA.user_id].user_id = memberA.user_id;\n            stats[memberA.user_id].hearts_from = {};\n            stats[memberA.user_id].hearts_total = 0;\n            stats[memberA.user_id].messages_total = 0;\n            for( let memberB of members){\n              stats[memberA.user_id].hearts_from[memberB.user_id]=0; \n            }\n          }\n\n          for(let message of messages){\n            if(message.sender_type == 'user'){\n              stats[message.user_id].messages_total++;\n              for( let heart of message.favorited_by){\n                stats[message.user_id].hearts_from[heart]++;\n                stats[message.user_id].hearts_total++;\n              }\n            }\n          }\n\n          for( let memberA of members ){\n            let stat = stats[memberA.user_id];\n            botMessage+= \"\\\"\"+ memberA.nickname + \"\\\" received: \" + stats[memberA.user_id].hearts_total + \" hearts over \" + stats[memberA.user_id].messages_total + \" message(s) ... \";\n            if(stats[memberA.user_id].messages_total != 0){\n              botMessage+= (stats[memberA.user_id].hearts_total/stats[memberA.user_id].messages_total).toFixed(2) + \" HPM\\n\";\n            }else{\n              botMessage +=\"\\n\";\n            }\n            for( let memberB of members ){\n              botMessage+= \"-\" +memberB.nickname +\": \" +  stats[memberA.user_id].hearts_from[memberB.user_id] + \"\\n\"\n            }\n            botMessage +=\"\\n\";\n          }\n          \n      }\n\n    }\n\n    if (botMessage) {\n        let opts = {\n            picture_url: \"\",\n        }\n        API.Bots.post(ACCESS_TOKEN, BOT_ID, botMessage, opts, function(err, ret) {\n            if (!err) {\n                console.log(botMessage);\n                console.log(consoleMessage);\n            }\n        });\n    }\n}\n\n\nexport const getAllMessages = async function() {\n    let messages = [];\n    const limit = 100;\n    console.log(\"Get messages.\");\n    let messageTemp = await helpers.callGetMessages({\n        group_id: GROUP_ID,\n        token: ACCESS_TOKEN,\n        before_id: 0\n    });\n    let messageCount = messageTemp.count;\n    messages = messageTemp.messages;\n\n    console.log(messageTemp.count);\n    console.log(messageTemp.messages.length);\n    if (messageCount > limit) {\n        let beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n        for (let i = limit; i < messageCount; i += limit) {\n            console.log(\"Before ID: \" + beforeId + \" Count: \" + i);\n            if (i >= limit) {\n                messageTemp = await helpers.callGetMessages({\n                    group_id: GROUP_ID,\n                    token: ACCESS_TOKEN,\n                    before_id: beforeId\n                });\n                console.log(\"Next message count: \" + messageTemp.count + \" -- \" + messageTemp.messages.length);\n                beforeId = messageTemp.messages[messageTemp.messages.length - 1].id;\n                Array.prototype.push.apply(messages, messageTemp.messages);\n            }\n        }\n    }\n    console.log(\"Get messages done.\");\n    console.log(\"Total messages: \" + messages.length);\n    return messages;\n}\n\nexport const countWords = function(messages) {\n    let totalWords = 0;\n    for (let message of messages) {\n        if (\"bot\" === message.sender_type) { // Ignore bot messages\n            continue;\n        }\n\n        let text = message.text;\n        if (isEmpty(text)) {\n            continue;\n        }\n        totalWords += text.trim().split(/\\s+/).length;\n    }\n    return totalWords;\n\n}\n\nexport const groupMeWordCount = function(messages, word) {\n    let wordsCount = 0;\n    for (let message of messages) {\n\n        if (\"bot\" === message.sender_type) { // Ignore bot messages\n            continue;\n        }\n\n        let text = message.text;\n        if (isEmpty(text)) {\n            continue;\n        }\n        if (text.includes(word)) {\n            wordsCount++;\n        }\n    }\n    return wordsCount;\n}\n\nexport const isEmpty = function(str) {\n    return (!str || 0 === str.length);\n}\n\nexport const getMessages = async function(seconds) {\n  console.log(\"Getting \" + seconds + \" seconds worth of messages.\");\n  \n\t// array to hold the messages we return\n  let messages = [];\t\n\t// getTime returns milli seconds since epoch, divide by 1k to conver to seconds and subtract how many seconds we care about\n\tlet seekTime = (new Date().getTime()/1000) - seconds;\n\n\tlet searchComplete = false;\n\tlet beforeId = 0;\n  let limit = 100;\n  let totalMessageCount = 0;\n\tdo{\n\t\t// get a chunk of messages \n\t\tlet data = await helpers.getMessageWrapper({\n\t\t\tgroup_id: GROUP_ID,\n\t\t\ttoken: ACCESS_TOKEN,\n\t\t\tbefore_id: beforeId,\n      limit: limit\n\t\t});\n\n    // set our request limit to the number of messages remaining\n    limit = data.count - messages.length;\n    totalMessageCount = data.count;\n    \n    // if limit is greater than 100, default to 100\n    limit = limit > 100 ? 100 : limit;\n    \n    // if limit is less than 100, set to 0.. who knows why.\n    limit = limit < 100 ? 0 : limit;\n    \n\t\t// loop through the chunk\n\t\tfor( let i = 0; i< data.messages.length; i++){\n      // see if this message timestamp is after our seek time\n\t\t\tif( data.messages[i].created_at > seekTime ){\n        // add it to our messages array\n        messages.push(data.messages[i]);\n\t\t\t}else{\n        // search is complete! set some flag and gtfo\n\t\t\t\tsearchComplete = true;\n        break;\n\t\t\t}\n\t\t}\n    \t\t\n\t\t// reassign the before id for the next chunk request\n    beforeId = data.messages[data.messages.length - 1 ].id;\n  }while( searchComplete == false && limit > 0);\n\n  console.log(\"Received \" + messages.length + \" of \" + totalMessageCount + \" messages.\");\n  return messages;\n}"
      ]
    },
    "mtime": 1508231479507
  }
}